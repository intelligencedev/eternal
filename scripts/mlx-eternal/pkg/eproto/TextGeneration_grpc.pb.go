// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: TextGeneration.proto

package eproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextGeneratorClient is the client API for TextGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextGeneratorClient interface {
	GenerateTextStream(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (TextGenerator_GenerateTextStreamClient, error)
}

type textGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewTextGeneratorClient(cc grpc.ClientConnInterface) TextGeneratorClient {
	return &textGeneratorClient{cc}
}

func (c *textGeneratorClient) GenerateTextStream(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (TextGenerator_GenerateTextStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextGenerator_ServiceDesc.Streams[0], "/textgenerator.TextGenerator/GenerateTextStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &textGeneratorGenerateTextStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextGenerator_GenerateTextStreamClient interface {
	Recv() (*TextResponse, error)
	grpc.ClientStream
}

type textGeneratorGenerateTextStreamClient struct {
	grpc.ClientStream
}

func (x *textGeneratorGenerateTextStreamClient) Recv() (*TextResponse, error) {
	m := new(TextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextGeneratorServer is the server API for TextGenerator service.
// All implementations must embed UnimplementedTextGeneratorServer
// for forward compatibility
type TextGeneratorServer interface {
	GenerateTextStream(*TextRequest, TextGenerator_GenerateTextStreamServer) error
	mustEmbedUnimplementedTextGeneratorServer()
}

// UnimplementedTextGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedTextGeneratorServer struct {
}

func (UnimplementedTextGeneratorServer) GenerateTextStream(*TextRequest, TextGenerator_GenerateTextStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateTextStream not implemented")
}
func (UnimplementedTextGeneratorServer) mustEmbedUnimplementedTextGeneratorServer() {}

// UnsafeTextGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextGeneratorServer will
// result in compilation errors.
type UnsafeTextGeneratorServer interface {
	mustEmbedUnimplementedTextGeneratorServer()
}

func RegisterTextGeneratorServer(s grpc.ServiceRegistrar, srv TextGeneratorServer) {
	s.RegisterService(&TextGenerator_ServiceDesc, srv)
}

func _TextGenerator_GenerateTextStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextGeneratorServer).GenerateTextStream(m, &textGeneratorGenerateTextStreamServer{stream})
}

type TextGenerator_GenerateTextStreamServer interface {
	Send(*TextResponse) error
	grpc.ServerStream
}

type textGeneratorGenerateTextStreamServer struct {
	grpc.ServerStream
}

func (x *textGeneratorGenerateTextStreamServer) Send(m *TextResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TextGenerator_ServiceDesc is the grpc.ServiceDesc for TextGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "textgenerator.TextGenerator",
	HandlerType: (*TextGeneratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateTextStream",
			Handler:       _TextGenerator_GenerateTextStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "TextGeneration.proto",
}
