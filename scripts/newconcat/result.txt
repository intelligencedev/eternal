/Users/arturoaquino/Documents/eternal/
├── config.go
├── db.go
├── errors.go
├── globals.go
├── handlers_chat.go
├── handlers_models.go
├── handlers_projects.go
├── handlers_tools.go
├── host.go
├── main.go
├── projects.go
├── routes.go
/Users/arturoaquino/Documents/eternal/public/templates/
├── alerts.html
├── boxheader.html
├── chat.html
├── flow.html
├── header.html
├── index.html
├── model.html
├── projects.html
├── shell.html
├── test.html
├── tools.html
--- BEGIN /Users/arturoaquino/Documents/eternal/routes.go ---
// eternal/routes.go - API routes

package main

import (
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/websocket/v2"
)

// setupRoutes sets up the routes for the application
func setupRoutes(app *fiber.App, config *AppConfig, modelParams []ModelParams) {
	app.Get("/", func(c *fiber.Ctx) error {
		return c.Render("templates/index", fiber.Map{})
	})

	app.Get("/config", func(c *fiber.Ctx) error {
		return c.JSON(config)
	})

	app.Get("/flow", func(c *fiber.Ctx) error {
		return c.Render("templates/flow", fiber.Map{})
	})

	// Project routes
	app.Post("/projects", handleGetProjects())

	// Chat session routes
	app.Post("/chatsubmit", handleChatSubmit(config))
	app.Post("/chat/role/:name", handleRoleSelection(config))

	// Model management routes
	app.Post("/modelcards", handleModelCards(modelParams))
	app.Post("/model/select/:name/:action", handleModelSelect())
	app.Get("/model/selected", handleSelectedModels())
	app.Post("/model/download", handleModelDownload(config))
	app.Post("/imgmodel/download", handleImgModelDownload(config))
	app.Post("/model/set/params", handleModelUpdate())

	// Model - Database routes
	app.Get("/modeldata/:modelName", handleModelData())
	app.Put("/modeldata/:modelName/downloaded", handleModelDownloadUpdate())

	// Chat - Database routes
	app.Get("/chats", handleGetChats())
	app.Get("/chats/:id", handleGetChatByID())
	app.Put("/chats/:id", handleUpdateChat())
	app.Delete("/chats/:id", handleDeleteChat())

	// Tool routes
	app.Get("/tools/list", handleToolList(config))
	app.Post("/tool/:toolName/:enabled/:topN", handleToolToggle(config))
	app.Get("/dpsearch", handleDPSearch())

	// Utility routes
	// return the app config
	app.Post("/config", func(c *fiber.Ctx) error {
		return c.JSON(config)
	})
	app.Post("/upload", handleUpload(config))
	app.Get("/sseupdates", handleSSEUpdates())
	app.Get("/ws", websocket.New(handleWebSocket(config)))

	// OpenAI routes
	app.Get("/openai/models", handleOpenAIModels(config))
	//app.Get("/wsoai", websocket.New(handleOpenAIWebSocket(config)))

	// Anthropic routes
	//app.Get("/wsanthropic", websocket.New(handleAnthropicWebSocket(config)))

	// Google routes
	// app.Get("/wsgoogle", websocket.New(handleGoogleWebSocket(config)))
}
--- END /Users/arturoaquino/Documents/eternal/routes.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/alerts.html ---
<!-- WebSocket connection container -->
<div id="download-progress" hx-ext="ws" ws-connect="/wsdownload-progress">
  <!-- Progress will be displayed here -->
  <div class="toast-container position-fixed bottom-0 end-0 p-3" id="toast-container">
    <div id="live-toast" class="toast" aria-live="assertive" aria-atomic="true" data-bs-autohide="false">
      <div class="toast-header">
        <img src="..." class="rounded me-2" alt="...">
        <strong class="me-auto">Download Progress</strong>
        <small class="toast-time">Just now</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        <!-- Progress message will be updated here -->
        <div id="progress-message">Starting download...</div>
      </div>
    </div>
  </div>
</div>

<script>
  // Define function to update progress
  function updateProgress(progress) {
    var progressMessage = document.getElementById('progress-message');
    progressMessage.textContent = 'Downloaded ' + progress.Current + '% of ' + progress.Total + '%';
  }

  // HTMX WebSocket event listeners
  htmx.on("htmx:wsOnMessage", function (evt) {
    var progress = JSON.parse(evt.detail.content);
    updateProgress(progress);
  });

  htmx.on("htmx:wsOnOpen", function (evt) {
    console.log("WebSocket connection opened");
  });

  htmx.on("htmx:wsOnClose", function (evt) {
    console.log("WebSocket connection closed");
  });

  // Additional functions as needed for scrolling, highlighting, etc.
  // ... (similar to previous <script> content) ...
</script>--- END /Users/arturoaquino/Documents/eternal/public/templates/alerts.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/header.html ---
<div id="cb-header" class="position-fixed fixed-top dark-blur mt-0" hx-preserve>
  <div id="hgradient"></div>
  <div class="box-container">
    <div class="circle"></div>
    <div class="box">
      <div class="panel front" style="--bg-color: var(--et-purple);"></div>
      <div class="panel back" style="--bg-color: var(--et-green);"></div>
      <div class="panel top" style="--bg-color: var(--et-blue);"></div>
      <div class="panel bottom" style="--bg-color: var(--et-red);"></div>
      <div class="panel left" style="--bg-color: var(--et-yellow);"></div>
      <div class="panel right" style="--bg-color: var(--et-light);"></div>
    </div>
  </div>
</div>

<script>
  // Get the elements
  const boxcontainer = document.querySelector(".box-container");
  const box = document.querySelector(".box");

  var rotationInterval = null;
  let r = 45;

  function getRandomRotation() {
    r += -90;
    const rotationX = r;
    const rotationY = r;
    const rotationZ = -180;
    return `rotateX(${rotationX}deg) rotateY(${rotationY}deg) rotateZ(${rotationZ}deg)`;
  }

  function chatRotation() {
    r += 10;
    const rotationX = r;
    const rotationY = r;
    const rotationZ = 0;
    return `rotateX(${rotationX}deg) rotateY(${rotationY}deg) rotateZ(${rotationZ}deg)`;
  }

  // Add a click event listener to rotate the box on click
  boxcontainer.addEventListener("click", function () {
    const newRotation = getRandomRotation();
    box.style.transition = "transform 0.5s";
    box.style.transform = newRotation;
    // chatbox.classList.toggle("expand"); // This line references an undefined "chatbox" which is not present in the provided code
  });

  box.addEventListener("mouseover", function () {
    // Check if event listener is already added
    if (box.hasAttribute("data-event-added")) {
      return;
    }

    // Only spin the box once when the mouse is over it
    box.setAttribute("data-event-added", true);

    // Rotate the box
    const newRotation = getRandomRotation();
    box.style.transition = "transform 0.5s ease";
    box.style.transform = newRotation;

    // Remove the event listener after the animation is done
    setTimeout(function () {
      box.removeAttribute("data-event-added");
    }, 1000);
  });

  setInterval(function () {
    const transform = window.getComputedStyle(box).getPropertyValue("transform");
  }, 1000);

  // Rotate the box on page load
  const newRotation = getRandomRotation();
  box.style.transition = "transform 0.5s ease";
  box.style.transform = newRotation;
</script>--- END /Users/arturoaquino/Documents/eternal/public/templates/header.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/projects.html ---
<div id="projects-container" class="row">
    <div class="h-auto">
        <div class="h-auto dropdown dropdown-center mx-2">
            <button class="btn btn-secondary bg-gradient dropdown-toggle w-100" type="button" data-bs-toggle="dropdown"
                aria-expanded="false">
                Projects
            </button>
            <ul class="dropdown-menu w-100" style="background-color: var(--et-card-bg);">
                <li><a href="#" class="dropdown-item" onclick="createNewProject()">Create New Project</a></li>
                <li>
                    <hr class="dropdown-divider">
                </li>
                <li>
                    <h6 class="dropdown-header">Existing Projects</h6>
                </li>
                <div id="project-list">
                    <!-- Project list items will be rendered here -->
                    {{range .projects}}
                    <li><a href="#" class="dropdown-item" onclick="selectProject('{{.Name}}')">{{.Name}}</a></li>
                    {{end}}
                </div>
            </ul>
        </div>
    </div>
</div>

<div id="selected-project-container" class="row mt-3"></div>

<style>
    .project-card {
        background-color: var(--et-card-bg);
        border-radius: 0.25rem;
        margin-bottom: 1rem;
    }

    .project-card .card-header {
        background-color: rgba(0, 0, 0, 0.1);
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .project-card .card-body {
        padding: 1rem;
    }

    .project-card .btn-group {
        margin-top: 1rem;
    }
</style>

<script>
    function renderProjectList(projects) {
        const projectList = document.getElementById('project-list');
        //projectList.innerHTML = '';
        projects.forEach(project => {
            const li = document.createElement('li');
            li.innerHTML = `<a href="#" class="dropdown-item" onclick="selectProject('${project.Name}')">${project.Name}</a>`;
            projectList.appendChild(li);
        });
    }

    function renderProjectCards(projects) {
        function renderProjectCards(projects) {
            const container = document.getElementById('project-cards-container');
            const selectedProjectContainer = document.getElementById('selected-project-container');
            container.innerHTML = '';
            selectedProjectContainer.innerHTML = ''; // Clear the selected project container
            projects.forEach(project => {
                console.log("Projects data:", project);
                const card = document.createElement('div');
                card.className = 'col-md-4';
                card.innerHTML = `
                    <div class="card project-card">
                        <div class="card-header">
                        <h5 class="card-title">${project.Name}</h5>
                        </div>
                        <div class="card-body">
                        <p class="card-text">${project.Description}</p>
                        <p><strong>Team:</strong> ${project.Team.Name}</p>
                        <div class="btn-group" role="group">
                            <button class="btn btn-primary bg-gradient" onclick="editProject('${project.Name}')">Edit</button>
                            <button class="btn btn-danger bg-gradient" onclick="deleteProject('${project.Name}')">Delete</button>
                        </div>
                        </div>
                    </div>
                `;
                container.appendChild(card);
            });
        }
    }

    function selectProject(projectName) {
        console.log(`Selected project: ${projectName}`);
        fetch(`/projects/${projectName}`)
            .then(response => response.json())
            .then(project => {
                renderSelectedProjectCard(project);
            })
            .catch(error => console.error('Error fetching project details:', error));
    }

    function createNewProject() {
        console.log('Creating new project');
        // Implement new project creation logic here
    }

    function editProject(projectName) {
        console.log(`Editing project: ${projectName}`);
        // Implement project editing logic here
    }

    function deleteProject(projectName) {
        if (confirm(`Are you sure you want to delete the project "${projectName}"?`)) {
            fetch(`/projects/${projectName}`, { method: 'DELETE' })
                .then(response => {
                    if (response.ok) {
                        console.log(`Deleted project: ${projectName}`);
                        fetchProjects(); // Refresh the project list
                    } else {
                        console.error(`Failed to delete project: ${projectName}`);
                    }
                })
                .catch(error => console.error('Error deleting project:', error));
        }
    }

    function renderSelectedProjectCard(project) {
        const container = document.getElementById('project-cards-container');
        container.innerHTML = ''; // Clear existing content
        const card = document.createElement('div');
        card.className = 'col-md-4';
        card.innerHTML = `
                <div class="card project-card">
                    <div class="card-header">
                        <h5 class="card-title">${project.Name}</h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">${project.Description}</p>
                        <p><strong>Team:</strong> ${project.Team.Name}</p>
                        <div class="btn-group" role="group">
                            <button class="btn btn-primary bg-gradient" onclick="editProject('${project.Name}')">Edit</button>
                            <button class="btn btn-danger bg-gradient" onclick="deleteProject('${project.Name}')">Delete</button>
                        </div>
                    </div>
                </div>
            `;
        container.appendChild(card);
    }


</script>--- END /Users/arturoaquino/Documents/eternal/public/templates/projects.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/errors.go ---
// errors.go
package main

import "fmt"

// Custom error types
type ConfigError struct {
	Msg string
}

func (e *ConfigError) Error() string {
	return fmt.Sprintf("Config Error: %s", e.Msg)
}

type DatabaseError struct {
	Msg string
}

func (e *DatabaseError) Error() string {
	return fmt.Sprintf("Database Error: %s", e.Msg)
}

type NetworkError struct {
	Msg string
}

func (e *NetworkError) Error() string {
	return fmt.Sprintf("Network Error: %s", e.Msg)
}
--- END /Users/arturoaquino/Documents/eternal/errors.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/handlers_models.go ---
package main

import (
	"errors"
	"eternal/pkg/hfutils"
	"eternal/pkg/llm"
	"eternal/pkg/llm/openai"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/log"
	"github.com/pterm/pterm"
	"gorm.io/gorm"
)

// handleModelData retrieves and returns data for a specific model.
func handleModelData() fiber.Handler {
	return func(c *fiber.Ctx) error {
		var model ModelParams
		modelName := c.Params("modelName")
		err := sqliteDB.First(modelName, &model)

		if err != nil {
			if errors.Is(err, gorm.ErrRecordNotFound) {
				return c.Status(fiber.StatusNotFound).SendString("Model not found")
			}
			return c.Status(fiber.StatusInternalServerError).SendString("Server Error")
		}

		return c.JSON(model)
	}
}

// handleModelDownloadUpdate updates the download status of a model.
func handleModelDownloadUpdate() fiber.Handler {
	return func(c *fiber.Ctx) error {
		modelName := c.Params("modelName")
		var payload struct {
			Downloaded bool `json:"downloaded"`
		}

		if err := c.BodyParser(&payload); err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Cannot parse JSON"})
		}

		err := sqliteDB.UpdateDownloadedByName(modelName, payload.Downloaded)
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": fmt.Sprintf("Failed to update model: %v", err)})
		}

		return c.JSON(fiber.Map{
			"success": true,
			"message": "Model 'Downloaded' status updated successfully",
		})
	}
}

// handleModelUpdate updates the model data in the database.
func handleModelUpdate() fiber.Handler {
	return func(c *fiber.Ctx) error {
		var model ModelParams
		if err := c.BodyParser(&model); err != nil {
			return c.Status(fiber.StatusBadRequest).SendString("Cannot parse JSON")
		}

		err := sqliteDB.UpdateByName(model.Name, model)
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).SendString("Server Error")
		}

		return c.JSON(model)
	}
}

// handleModelCards retrieves and renders model cards.
func handleModelCards(modelParams []ModelParams) fiber.Handler {
	return func(c *fiber.Ctx) error {
		err := sqliteDB.Find(&modelParams)

		if err != nil {
			log.Errorf("Database error: %v", err)
			return c.Status(500).SendString("Server Error")
		}

		return c.Render("templates/model", fiber.Map{"models": modelParams})
	}
}

// handleModelSelect handles the selection of models for use.
func handleModelSelect() fiber.Handler {
	return func(c *fiber.Ctx) error {
		modelName := c.Params("name")
		action := c.Params("action")

		if action == "add" {
			if err := AddSelectedModel(sqliteDB.db, modelName); err != nil {
				return c.Status(fiber.StatusInternalServerError).SendString("Server Error")
			}
		} else if action == "remove" {
			if err := RemoveSelectedModel(sqliteDB.db, modelName); err != nil {
				return c.Status(fiber.StatusInternalServerError).SendString("Server Error")
			}
		} else {
			return c.Status(fiber.StatusBadRequest).SendString("Invalid action")
		}

		return c.SendStatus(fiber.StatusOK)
	}
}

// handleSelectedModels retrieves and returns the list of selected models.
func handleSelectedModels() fiber.Handler {
	return func(c *fiber.Ctx) error {
		selectedModels, err := GetSelectedModels(sqliteDB.db)

		if err != nil {
			log.Errorf("Error getting selected models: %v", err)
			return c.Status(500).SendString("Server Error")
		}

		var selectedModelNames []string
		for _, model := range selectedModels {
			selectedModelNames = append(selectedModelNames, model.ModelName)
		}

		return c.JSON(selectedModelNames)
	}
}

// handleModelDownload handles the download of a specified model.
func handleModelDownload(config *AppConfig) fiber.Handler {
	return func(c *fiber.Ctx) error {
		pterm.Error.Println("Download route hit")
		modelName := c.Query("model")

		if modelName == "" {
			log.Errorf("Missing parameters for download")
			return c.Status(fiber.StatusBadRequest).SendString("Missing parameters")
		}

		var downloadURL string
		for _, model := range config.LanguageModels {
			if model.Name == modelName {
				downloadURL = model.Downloads[0]
				break
			}
		}

		modelFileName := filepath.Base(downloadURL)
		modelPath := filepath.Join(config.DataPath, "models", modelName, modelFileName)

		var partialDownload bool
		if info, err := os.Stat(modelPath); err == nil {
			if info.Size() > 0 {
				expectedSize, err := llm.GetExpectedFileSize(downloadURL)
				if err != nil {
					log.Errorf("Error getting expected file size: %v", err)
				}
				partialDownload = info.Size() < expectedSize
			}
		}

		go func() {
			var err error

			if partialDownload {
				pterm.Info.Printf("Resuming download for model: %s\n", modelName)
				err = llm.Download(downloadURL, modelPath)
			} else {
				pterm.Info.Printf("Starting download for model: %s\n", modelName)
				err = llm.Download(downloadURL, modelPath)
			}

			if err != nil {
				log.Errorf("Error in download: %v", err)
			} else {
				err = sqliteDB.UpdateDownloadedByName(modelName, true)
				if err != nil {
					log.Errorf("Failed to update model downloaded state: %v", err)
				}
			}
		}()

		progressErr := fmt.Sprintf("<div class='w-100' id='progress-download-%s' hx-ext='sse' sse-connect='/sseupdates' sse-swap='message' hx-trigger='load'></div>", modelName)

		return c.SendString(progressErr)
	}
}

// handleImgModelDownload handles the download of image generation models.
func handleImgModelDownload(config *AppConfig) fiber.Handler {
	return func(c *fiber.Ctx) error {
		config.Tools.ImgGen.Enabled = true

		modelName := c.Query("model")

		var downloadURL string
		for _, model := range config.ImageModels {
			if model.Name == modelName {
				downloadURL = model.Downloads[0]
			}
		}

		modelFileName := strings.Split(downloadURL, "/")[len(strings.Split(downloadURL, "/"))-1]

		if modelName == "" {
			log.Errorf("Missing parameters for download")
			return c.Status(fiber.StatusBadRequest).SendString("Missing parameters")
		}

		modelRoot := fmt.Sprintf("%s/models/%s", config.DataPath, modelName)
		modelPath := fmt.Sprintf("%s/models/%s/%s", config.DataPath, modelName, modelFileName)
		tmpPath := fmt.Sprintf("%s/tmp", config.DataPath)

		if _, err := os.Stat(modelRoot); os.IsNotExist(err) {
			if err := os.MkdirAll(modelRoot, 0755); err != nil {
				log.Errorf("Error creating model directory: %v", err)
				return c.Status(fiber.StatusInternalServerError).SendString("Server Error")
			}
		}

		if _, err := os.Stat(tmpPath); os.IsNotExist(err) {
			if err := os.MkdirAll(tmpPath, 0755); err != nil {
				log.Errorf("Error creating tmp directory: %v", err)
				return c.Status(fiber.StatusInternalServerError).SendString("Server Error")
			}
		}

		if _, err := os.Stat(modelPath); err != nil {
			dm := hfutils.ConcurrentDownloadManager{
				FileName:    modelFileName,
				URL:         downloadURL,
				Destination: modelPath,
				NumParts:    1,
				TempDir:     tmpPath,
			}

			go dm.PrintProgress()

			if err := dm.Download(); err != nil {
				fmt.Println("Download failed:", err)
			} else {
				fmt.Println("Download successful!")
			}
		}

		vaeName := "sdxl_vae.safetensors"
		vaeURL := "https://huggingface.co/madebyollin/sdxl-vae-fp16-fix/blob/main/sdxl_vae.safetensors"
		vaePath := fmt.Sprintf("%s/models/%s/%s", config.DataPath, modelName, vaeName)

		if _, err := os.Stat(modelRoot); os.IsNotExist(err) {
			if err := os.MkdirAll(modelRoot, 0755); err != nil {
				log.Errorf("Error creating model directory: %v", err)
				return c.Status(fiber.StatusInternalServerError).SendString("Server Error")
			}
		}

		if _, err := os.Stat(vaePath); os.IsNotExist(err) {
			go func() {
				response, err := http.Get(vaeURL)
				if err != nil {
					pterm.Error.Printf("Failed to download file: %v", err)
					return
				}
				defer response.Body.Close()

				file, err := os.Create(vaePath)
				if err != nil {
					pterm.Error.Printf("Failed to create file: %v", err)
					return
				}
				defer file.Close()

				_, err = io.Copy(file, response.Body)
				if err != nil {
					pterm.Error.Printf("Failed to write to file: %v", err)
					return
				}

				pterm.Info.Printf("Downloaded file: %s", vaeName)
			}()
		}

		progressErr := "<div name='sse-messages' class='w-100' id='sse-messages' hx-ext='sse' sse-connect='/sseupdates' sse-swap='message'></div>"

		return c.SendString(progressErr)
	}
}

// handleOpenAIModels retrieves and returns a list of OpenAI models.
func handleOpenAIModels(config *AppConfig) fiber.Handler {
	return func(c *fiber.Ctx) error {
		client := openai.NewClient(config.OAIKey)
		modelsResponse, err := openai.GetModels(client)

		if err != nil {
			log.Errorf(err.Error())
			return c.Status(500).SendString("Server Error")
		}

		var gptModels []string
		for _, model := range modelsResponse.Data {
			if strings.HasPrefix(model.ID, "gpt") {
				gptModels = append(gptModels, model.ID)
			}
		}

		return c.JSON(fiber.Map{
			"object": "list",
			"data":   gptModels,
		})
	}
}
--- END /Users/arturoaquino/Documents/eternal/handlers_models.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/projects.go ---
// projects.go

package main

import (
	"fmt"
	"os"

	"gorm.io/gorm"
)

// Domain represents a knowledge domain or area of expertise
type Domain struct {
	ID          uint
	Name        string
	Description string
}

type ToolMemory struct {
	Enabled bool `yaml:"enabled"`
	TopN    int  `yaml:"top_n"`
}

type ToolWebGet struct {
	Enabled bool `yaml:"enabled"`
}

type ToolWebSearch struct {
	Enabled  bool   `yaml:"enabled"`
	Name     string `yaml:"name"`
	Endpoint string `yaml:"endpoint"`
	TopN     int    `yaml:"top_n"`
}

type ToolImgGen struct {
	Enabled bool `yaml:"enabled"`
}

type Tools struct {
	Memory    ToolMemory    `yaml:"memory"`
	WebGet    ToolWebGet    `yaml:"webget"`
	WebSearch ToolWebSearch `yaml:"websearch"`
	ImgGen    ToolImgGen    `yaml:"img_gen"`
}

// Role defines a template for an assistant's behavior
type Role struct {
	ID           uint
	Name         string
	Instructions string
	DomainID     uint   // Foreign key
	Domain       Domain `gorm:"foreignKey:DomainID"`
}

// LLMParams represents the configuration parameters for an LLM
type LLMParams struct {
	Model       string
	Temperature float64
	MaxTokens   int
}

// Assistant represents an LLM with its configuration and role
type Assistant struct {
	ID     uint
	Name   string
	RoleID uint
	Role   Role      `gorm:"foreignKey:RoleID"`
	Params LLMParams `gorm:"embedded"`
	TeamID uint      // Foreign key
}

// Team is a collection of assistants
type Team struct {
	ID         uint
	Name       string
	Assistants []Assistant `gorm:"foreignKey:TeamID"`
}

// Workflow represents the sequence and connections between assistants
type Workflow struct {
	ID          uint
	Name        string
	Description string
	Steps       []WorkflowStep `gorm:"foreignKey:WorkflowID"`
}

// WorkflowStep represents a single step in a workflow
type WorkflowStep struct {
	ID            uint
	WorkflowID    uint
	AssistantID   uint
	Order         int
	InputSources  []WorkflowStepSource `gorm:"foreignKey:StepID"`
	OutputTargets []WorkflowStepTarget `gorm:"foreignKey:StepID"`
}

// WorkflowStepSource represents the source steps for a WorkflowStep
type WorkflowStepSource struct {
	ID       uint
	StepID   uint
	SourceID uint
}

// WorkflowStepTarget represents the target steps for a WorkflowStep
type WorkflowStepTarget struct {
	ID       uint
	StepID   uint
	TargetID uint
}

// FileType is an enum for supported file types
type FileType int

const (
	TextFile FileType = iota
	MarkdownFile
	JSONFile
	PythonFile
	GoFile
	HTMLFile
	CSSFile
	JSFile
)

// File represents a file in the project
type File struct {
	gorm.Model
	Name      string
	Path      string
	Type      FileType
	Content   string
	ProjectID uint
}

// Project represents the overall configuration for a goal
type Project struct {
	gorm.Model
	Name        string `gorm:"unique;not null"`
	Description string
	TeamID      uint
	Team        Team `gorm:"foreignKey:TeamID"`
	WorkflowID  uint
	Workflow    Workflow `gorm:"foreignKey:WorkflowID"`
	Files       []File   `gorm:"foreignKey:ProjectID"`
}

// DEPRECATED
// DefaultProjectConfig is a struct for the default configuration of a project
// type DefaultProjectConfig struct {
// 	Name          string `yaml:"name"`
// 	Description   string `yaml:"description"`
// 	TeamName      string `yaml:"team_name"`
// 	AssistantName string `yaml:"assistant_name"`
// }

// Processor is an interface for objects that can process files
type Processor interface {
	Process(file File) error
}

// Inferencer is an interface for objects that can run inference
type Inferencer interface {
	RunInference(prompt string) (string, error)
}

// AssistantManager handles CRUD operations for assistants
type AssistantManager interface {
	CreateAssistant(assistant Assistant) error
	GetAssistant(id uint) (Assistant, error)
	UpdateAssistant(assistant Assistant) error
	DeleteAssistant(id uint) error
}

// ProjectManager handles CRUD operations for projects
type ProjectManager interface {
	CreateProject(project Project) error
	GetProjectByName(name string) (Project, error)
	UpdateProject(project Project) error
	DeleteProject(id uint) error
}

// CreateProject creates the resources associated with the project.
func CreateProjectFolder(config AppConfig, p *Project) error {
	// Create the Project data in the database
	if err := sqliteDB.CreateProject(p); err != nil {
		return err
	}

	// Create the project folder
	projectPath := fmt.Sprintf("%s/projects/%s", config.DataPath, p.Name)
	return os.MkdirAll(projectPath, os.ModePerm)
}

// GetProjectByName retrieves a project by its name
func GetProjectByName(name string, db *gorm.DB) (Project, error) {
	var project Project
	if err := db.Where("name = ?", name).First(&project); err != nil {
		return Project{}, err.Error
	}
	return project, nil
}
--- END /Users/arturoaquino/Documents/eternal/projects.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/boxheader.html ---
<head>
  <style>
    .box-container {
      perspective: 600px; /* Adjusted to be half of the original to maintain the perspective effect */
      position: absolute;
      top: 25px;
      left: 50%;
      transform: translateY(-5%);
      transform: translateX(-50%);
      z-index: 2;
    }

    .box {
      width: 20px; /* Half of the original size */
      height: 20px; /* Half of the original size */
      position: relative;
      transform-style: preserve-3d;
      transition: transform 0.5s ease;
      transform-origin: center;
    }

    .box .panel {
      position: absolute;
      width: 20px; /* Half of the original size */
      height: 20px; /* Half of the original size */
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.25);
    }

    .box .panel.front {
      transform: translateZ(12.5px); /* Half of the original size */
    }

    .box .panel.back {
      transform: rotateY(180deg) translateZ(12.5px); /* Half of the original size */
    }

    .box .panel.top {
      transform: rotateX(90deg) translateZ(12.5px); /* Half of the original size */
    }

    .box .panel.bottom {
      transform: rotateX(-90deg) translateZ(12.5px); /* Half of the original size */
    }

    .box .panel.left {
      transform: rotateY(-90deg) translateZ(12.5px); /* Half of the original size */
    }

    .box .panel.right {
      transform: rotateY(90deg) translateZ(12.5px); /* Half of the original size */
    }

    @keyframes spin {
      from {
        transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
      }

      to {
        transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
      }
    }

    .box:hover {
      animation: spin linear infinite;
    }
  </style>
</head>

<div id="row cb-header">
  <div class="box-container">
    <div class="box">
      <div class="panel front"></div>
      <div class="panel back"></div>
      <div class="panel top"></div>
      <div class="panel bottom"></div>
      <div class="panel left"></div>
      <div class="panel right"></div>
    </div>
  </div>
</div>

<script>
  // Get the elements
  const boxcontainer = document.querySelector(".box-container");
  const box = document.querySelector(".box");

  var rotationInterval = null;
  let r = 45;

  function getRandomRotation() {
    r += -90;
    const rotationX = r;
    const rotationY = r;
    const rotationZ = -180;
    return `rotateX(${rotationX}deg) rotateY(${rotationY}deg) rotateZ(${rotationZ}deg)`;
  }

  function chatRotation() {
    r += -10;
    const rotationX = r;
    const rotationY = r;
    const rotationZ = -90;
    return `rotateX(${rotationX}deg) rotateY(${rotationY}deg) rotateZ(${rotationZ}deg)`;
  }

  // Add a click event listener to rotate the box on click
  boxcontainer.addEventListener("click", function () {
    const newRotation = getRandomRotation();
    box.style.transition = "transform 0.5s";
    box.style.transform = newRotation;
    // chatbox.classList.toggle("expand"); // This line references an undefined "chatbox" which is not present in the provided code
  });

  box.addEventListener("mouseover", function () {
    // Check if event listener is already added
    if (box.hasAttribute("data-event-added")) {
      return;
    }

    // Only spin the box once when the mouse is over it
    box.setAttribute("data-event-added", true);

    // Rotate the box
    const newRotation = getRandomRotation();
    box.style.transition = "transform 0.5s ease";
    box.style.transform = newRotation;

    // Remove the event listener after the animation is done
    setTimeout(function () {
      box.removeAttribute("data-event-added");
    }, 1000);
  });

  setInterval(function () {
    const transform = window.getComputedStyle(box).getPropertyValue("transform");
  }, 1000);

  // Rotate the box on page load
  const newRotation = getRandomRotation();
  box.style.transition = "transform 0.5s ease";
  box.style.transform = newRotation;
</script>--- END /Users/arturoaquino/Documents/eternal/public/templates/boxheader.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/index.html ---
<!doctype html>

<html lang="en" data-bs-core="modern" data-bs-theme="dark">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Eternal</title>

  <!-- Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">

  <!-- Halfmoon CSS -->
  <link rel="stylesheet" href="css/halfmoon/halfmoon.css">

  <!-- Halfmoon modern core theme only -->
  <link rel="stylesheet" href="css/halfmoon/cores/halfmoon.modern.css">

  <!-- Custom Styles -->
  <link rel="stylesheet" href="css/styles.css">
  <link rel="stylesheet" href="css/header.css">
  <!-- <link rel="stylesheet" href="https://unpkg.com/@antonz/codapi@0.17.0/dist/snippet.css" /> -->

  <!-- Code Highlight -->
  <link rel="stylesheet" href="js/highlight/styles/github-dark-dimmed.min.css">
  <script src="js/highlight/highlight.js"></script>
  <script src="js/highlight/es/languages/go.min.js"></script>
  <script src="js/highlight/es/languages/python.min.js"></script>
  <script src="js/highlight/es/languages/rust.min.js"></script>
  <script src="js/highlight/es/languages/bash.min.js"></script>
  <script src="js/highlight/es/languages/yaml.min.js"></script>
  <script src="js/highlight/es/languages/json.min.js"></script>
  <script src="js/highlight/es/languages/markdown.min.js"></script>
  <script src="js/highlight/es/languages/javascript.min.js"></script>
  <script src="js/highlight/es/languages/typescript.min.js"></script>
  <script src="js/highlight/es/languages/css.min.js"></script>

  <!-- Bootstrap JS bundle with Popper -->
  <script src="js/bootstrap/bootstrap.bundle.min.js"></script>

  <!-- HTMX -->
  <!-- <script src="js/htmx.min.js"></script> -->
  <script src="https://unpkg.com/htmx.org@2.0.0-beta1/dist/htmx.min.js"></script>
  <script src="https://unpkg.com/htmx.org/dist/ext/ws.js"></script>
  <script src="https://unpkg.com/htmx-ext-sse@2.0.0/sse.js"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

  <style>
    #tools,
    #chat-view {
      height: 100%;
      overflow-y: auto;
    }

    body,
    html {
      height: 100%;
      margin: 0;
    }

    #content {
      display: flex;
      flex-direction: column;
      height: 100vh;
    }

    .bottom-bar {
      flex-shrink: 0;
    }
  </style>
</head>

<body>
  {{template "templates/header" .}}
  <div id="content" class="container-fluid p-0 m-0">
    <div class="main-content">
      <div class="row h-100 pt-5">

        <div id="tool-view" class="col-3">
          <!-- <div class='w-100' id='progress-download-everyone-coder-33b' hx-ext='sse' sse-connect='/sseupdates' sse-swap='message' hx-trigger='load'></div> -->
          {{template "templates/tools" .}}
        </div>

        <div id="chat-view" class="col-6">
          <div id="chat" class="row chat-container fs-5"></div>
        </div>

        <div id="info" class="col-3">
        </div>

      </div>
    </div>

    <!-- PROMPT TOOLBAR -->
    <div class="mt-2 bottom-bar shadow-lg" style="background-color: var(--et-card-bg);">
      <form>
        <div class="py-1" id="prompt-view">
          <div class="row">
            <button class="btn fw-medium position-relative" data-bs-toggle="/">
              <span class="fs-4">Et<svg class="" width="16" height="16" viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg">
                  <path fill="#ffffff"
                    d="M6.676 11.946a.75.75 0 0 0 1.18-.925a7.882 7.882 0 0 1-1.01-1.677a.75.75 0 1 0-1.372.604c.316.72.728 1.394 1.202 1.998M4.84 7.672a.75.75 0 0 0 1.489-.178a5.115 5.115 0 0 1 .109-1.862a.75.75 0 1 0-1.455-.366a6.615 6.615 0 0 0-.144 2.406M6.007 3.08a.75.75 0 0 0 1.218.875a5.84 5.84 0 0 1 .621-.727a.75.75 0 0 0-1.06-1.061a7.396 7.396 0 0 0-.779.912m11.629 8.975a.75.75 0 0 0-1.18.925c.4.511.745 1.079 1.009 1.677a.75.75 0 1 0 1.373-.604a9.383 9.383 0 0 0-1.202-1.998m1.836 4.274a.75.75 0 0 0-1.49.178a5.114 5.114 0 0 1-.108 1.862a.75.75 0 1 0 1.454.366a6.616 6.616 0 0 0 .144-2.406m-1.168 4.592a.75.75 0 0 0-1.218-.875a5.9 5.9 0 0 1-.62.727a.75.75 0 0 0 1.06 1.061c.293-.293.552-.598.778-.912M12.082 7.573a.75.75 0 0 1 .127-1.053a9.384 9.384 0 0 1 1.998-1.202a.75.75 0 0 1 .605 1.373a7.881 7.881 0 0 0-1.678 1.01a.75.75 0 0 1-1.053-.128m3.747-2.056a.75.75 0 0 1 .656-.833a6.615 6.615 0 0 1 2.405.143a.75.75 0 0 1-.366 1.455a5.115 5.115 0 0 0-1.862-.109a.75.75 0 0 1-.833-.656m4.202.506a.75.75 0 0 1 1.046-.171c.314.226.619.485.912.778a.75.75 0 1 1-1.06 1.06a5.895 5.895 0 0 0-.728-.62a.75.75 0 0 1-.17-1.047M12.103 17.48a.75.75 0 1 0-.926-1.18c-.51.4-1.078.746-1.677 1.01a.75.75 0 0 0 .604 1.372a9.379 9.379 0 0 0 1.999-1.202m-4.275 1.836a.75.75 0 0 0-.178-1.49a5.114 5.114 0 0 1-1.862-.108a.75.75 0 0 0-.366 1.455a6.614 6.614 0 0 0 2.406.143m-4.592-1.168a.75.75 0 0 0 .875-1.218a5.892 5.892 0 0 1-.727-.62a.75.75 0 1 0-1.06 1.06c.293.293.597.552.912.778" />
                  <path fill="#ffffff"
                    d="M13.746 15.817a.75.75 0 0 1-1.347-.407c-1.28.605-2.914.783-4.504.558C4.685 15.513 1.25 13.316 1.25 9a.75.75 0 0 1 1.5 0c0 3.284 2.564 5.087 5.355 5.482a7.72 7.72 0 0 0 1.872.04a6.978 6.978 0 0 1-1.638-.932a.75.75 0 0 1 .492-1.348c-.548-1.255-.703-2.821-.487-4.347c.455-3.21 2.652-6.645 6.968-6.645a.75.75 0 0 1 0 1.5c-3.285 0-5.087 2.564-5.483 5.355a7.872 7.872 0 0 0-.073 1.423c.212-.465.487-.918.81-1.345a.75.75 0 0 1 1.336.587c1.23-.499 2.735-.634 4.203-.426c3.21.455 6.645 2.652 6.645 6.968a.75.75 0 0 1-1.5 0c0-3.285-2.564-5.087-5.355-5.483a7.985 7.985 0 0 0-.959-.078c.357.186.704.408 1.037.659a.75.75 0 0 1-.492 1.348c.548 1.255.703 2.821.487 4.347c-.455 3.21-2.652 6.645-6.968 6.645a.75.75 0 0 1 0-1.5c3.284 0 5.087-2.564 5.482-5.355a7.87 7.87 0 0 0 .073-1.423a7.192 7.192 0 0 1-.809 1.345" />
                </svg>rnal</span>
            </button>
          </div>
          <div class="hstack">
            <div class="row ms-auto w-25">

              <!-- Project Config -->
              <div class="col">
                <button id="projectBtn" class="btn" hx-post="/projects" hx-target="#tool-view" data-bs-toggle="tooltip"
                  data-bs-title="Project Settings">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                    <g fill="none" stroke="currentColor" stroke-width="1.5">
                      <path stroke-linecap="round" d="M10 14h2m0 0h2m-2 0v2m0-2v-2" />
                      <path
                        d="M2 6.95c0-.883 0-1.324.07-1.692A4 4 0 0 1 5.257 2.07C5.626 2 6.068 2 6.95 2c.386 0 .58 0 .766.017a4 4 0 0 1 2.18.904c.144.119.28.255.554.529L11 4c.816.816 1.224 1.224 1.712 1.495a4 4 0 0 0 .848.352C14.098 6 14.675 6 15.828 6h.374c2.632 0 3.949 0 4.804.77c.079.07.154.145.224.224c.77.855.77 2.172.77 4.804V14c0 3.771 0 5.657-1.172 6.828C19.657 22 17.771 22 14 22h-4c-3.771 0-5.657 0-6.828-1.172C2 19.657 2 17.771 2 14V6.95Z" />
                    </g>
                  </svg>
                </button>
              </div>

              <!-- Tool Config -->
              <div class="col">
                <button id="toolBtn" class="btn" onclick="getProjects()" data-bs-toggle="tooltip"
                  data-bs-title="Tool Settings">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                    <g fill="currentColor">
                      <path fill-rule="evenodd"
                        d="M10 6v12c0 1.4 0 2.1-.272 2.635a2.5 2.5 0 0 1-1.093 1.092C8.1 22 7.4 22 6 22c-1.4 0-2.1 0-2.635-.273a2.5 2.5 0 0 1-1.093-1.092C2 20.1 2 19.4 2 18V6c0-1.4 0-2.1.272-2.635a2.5 2.5 0 0 1 1.093-1.093C3.9 2 4.6 2 6 2c1.4 0 2.1 0 2.635.272a2.5 2.5 0 0 1 1.093 1.093C10 3.9 10 4.6 10 6ZM7 19.75a.75.75 0 0 0 0-1.5H5a.75.75 0 0 0 0 1.5h2Z"
                        clip-rule="evenodd" />
                      <path
                        d="m19.06 10.614l-5.838 6.09c-.73.761-1.095 1.142-1.409 1.016c-.313-.126-.313-.653-.313-1.708V7.774a2.5 2.5 0 0 1 .73-1.76l1.054-1.055l.43-.33c1.004-.767 1.506-1.15 2.053-1.269a2.5 2.5 0 0 1 1.353.085c.528.184.979.627 1.88 1.514c1 1 1.5 1.5 1.685 2.072a2.5 2.5 0 0 1 .011 1.503c-.176.575-.663 1.077-1.636 2.08ZM12.79 22h5.11c1.4 0 2.1 0 2.634-.273a2.5 2.5 0 0 0 1.093-1.092c.272-.535.272-1.235.272-2.635c0-1.4 0-2.1-.272-2.635a2.5 2.5 0 0 0-1.093-1.092C20 14 19.3 14 17.9 14h-.22l-5.801 5.798a1.224 1.224 0 0 0-.378.883c0 .713.577 1.319 1.29 1.319Z" />
                    </g>
                  </svg>
                </button>
              </div>

              <!-- Image Generation -->
              <div class="col" id="txt2img">
                <button id="imgGenBtn" class="btn" data-model-name="128713"
                  onclick="downloadImageModel('dreamshaper-8-turbo-sdxl')" hx-target="#imgstatus"
                  data-bs-toggle="tooltip" data-bs-title="Image Generation">
                  <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path fill="#FFFFFF"
                      d="M17.29 11.969a1.33 1.33 0 0 1-1.322 1.337a1.33 1.33 0 0 1-1.323-1.337a1.33 1.33 0 0 1 1.323-1.338c.73 0 1.323.599 1.323 1.338Z" />
                    <path fill="#FFFFFF" fill-rule="evenodd"
                      d="M18.132 7.408c-.849-.12-1.942-.12-3.305-.12H9.173c-1.363 0-2.456 0-3.305.12c-.877.125-1.608.393-2.152 1.02c-.543.628-.71 1.397-.716 2.293c-.006.866.139 1.962.319 3.329l.365 2.771c.141 1.069.255 1.933.432 2.61c.185.704.457 1.289.968 1.741c.51.452 1.12.648 1.834.74c.687.088 1.55.088 2.615.088h4.934c1.065 0 1.928 0 2.615-.088c.715-.092 1.323-.288 1.834-.74c.511-.452.783-1.037.968-1.741c.177-.677.291-1.542.432-2.61l.365-2.771c.18-1.367.325-2.463.319-3.33c-.007-.895-.172-1.664-.716-2.291c-.544-.628-1.275-.896-2.152-1.021ZM6.052 8.732c-.726.104-1.094.292-1.34.578c-.248.285-.384.678-.39 1.42c-.005.762.126 1.765.315 3.195l.05.38l.371-.273c.96-.702 2.376-.668 3.288.095l3.384 2.833c.32.268.871.318 1.269.084l.235-.138c1.125-.662 2.634-.592 3.672.19l1.832 1.38c.09-.496.171-1.105.273-1.876l.352-2.675c.189-1.43.32-2.433.314-3.195c-.005-.742-.141-1.135-.388-1.42c-.247-.286-.615-.474-1.342-.578c-.745-.106-1.745-.107-3.172-.107h-5.55c-1.427 0-2.427.001-3.172.107Z"
                      clip-rule="evenodd" />
                    <path fill="#FFFFFF"
                      d="M8.859 2h6.282c.21 0 .37 0 .51.015a2.623 2.623 0 0 1 2.159 1.672H6.19a2.623 2.623 0 0 1 2.159-1.672c.14-.015.3-.015.51-.015ZM6.88 4.5c-1.252 0-2.278.84-2.62 1.954a2.814 2.814 0 0 0-.021.07c.358-.12.73-.2 1.108-.253c.973-.139 2.202-.139 3.629-.139h6.203c1.427 0 2.656 0 3.628.139c.378.053.75.132 1.11.253a2.771 2.771 0 0 0-.021-.07C19.553 5.34 18.527 4.5 17.276 4.5H6.878Z" />
                  </svg>
                </button>
              </div>
            </div>

            <!-- PROMPT BAR -->
            <div class="w-50 input-group mx-1">
              <button class="btn btn-secondary bg-gradient" id="upload">
                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path fill="#ffffff" fill-rule="evenodd"
                    d="M11.244 1.955c1.7-.94 3.79-.94 5.49 0c.63.348 1.218.91 2.173 1.825l.093.09l.098.093c.95.91 1.54 1.475 1.906 2.081a5.144 5.144 0 0 1 0 5.337c-.366.607-.955 1.17-1.906 2.08l-.098.095l-7.457 7.14c-.53.506-.96.92-1.34 1.226c-.393.316-.78.561-1.235.692a3.51 3.51 0 0 1-1.937 0c-.454-.13-.841-.376-1.234-.692c-.38-.307-.811-.72-1.34-1.226l-.048-.046c-.529-.507-.96-.92-1.28-1.283c-.33-.376-.592-.753-.733-1.201a3.181 3.181 0 0 1 0-1.907c.14-.448.402-.825.733-1.2c.32-.364.751-.777 1.28-1.284l7.35-7.038l.079-.075c.369-.354.68-.654 1.041-.82a2.402 2.402 0 0 1 2.007 0c.36.166.672.466 1.041.82l.079.075l.08.078c.367.35.683.651.86 1.003a2.213 2.213 0 0 1 0 1.994a2.331 2.331 0 0 1-.391.538c-.142.152-.323.326-.535.529l-7.394 7.08a.75.75 0 0 1-1.038-1.083l7.38-7.067c.23-.22.38-.364.488-.48a.906.906 0 0 0 .15-.191a.712.712 0 0 0 0-.646c-.044-.088-.143-.198-.638-.671c-.492-.471-.61-.57-.71-.617a.902.902 0 0 0-.75 0c-.101.047-.22.146-.711.617L5.47 14.836c-.558.535-.943.904-1.215 1.213c-.267.304-.376.496-.428.66a1.683 1.683 0 0 0 0 1.008c.052.163.16.355.428.659c.272.31.657.678 1.215 1.213c.56.535.945.904 1.269 1.165c.316.255.523.365.707.418c.361.104.747.104 1.108 0c.184-.053.391-.163.707-.418c.324-.261.71-.63 1.269-1.165l7.433-7.117c1.08-1.034 1.507-1.453 1.756-1.866a3.645 3.645 0 0 0 0-3.787c-.249-.413-.676-.832-1.756-1.866c-1.079-1.032-1.518-1.444-1.954-1.685a4.198 4.198 0 0 0-4.039 0c-.437.24-.876.653-1.954 1.685l-5.99 5.735A.75.75 0 0 1 2.99 9.605L8.98 3.87l.093-.09c.955-.914 1.543-1.477 2.172-1.825"
                    clip-rule="evenodd" />
                </svg>
              </button>
              <input type="file" id="file-input" style="display: none;" />
              <textarea id="message" name="userprompt" class="col form-control shadow-none"
                placeholder="Type your message..." rows="2" style="outline: none;">write a haiku</textarea>
              <!-- Clear textarea after submit -->
              <button id="send" class="btn btn-secondary btn-prompt-send bg-gradient" type="button"
                hx-post="/chatsubmit" hx-target="#chat" hx-swap="beforeend"
                hx-on::after-request="document.getElementById('message').value=''; textarea.style.height = 'auto'; textarea.style.height = `${Math.min(this.scrollHeight, this.clientHeight * 1)}px`;">
                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path fill="#ffffff" fill-rule="evenodd"
                    d="M12 15.75a.75.75 0 0 0 .75-.75V4.027l1.68 1.961a.75.75 0 1 0 1.14-.976l-3-3.5a.75.75 0 0 0-1.14 0l-3 3.5a.75.75 0 1 0 1.14.976l1.68-1.96V15c0 .414.336.75.75.75"
                    clip-rule="evenodd" />
                  <path fill="#ffffff"
                    d="M16 9c-.702 0-1.053 0-1.306.169a1 1 0 0 0-.275.275c-.169.253-.169.604-.169 1.306V15a2.25 2.25 0 1 1-4.5 0v-4.25c0-.702 0-1.053-.169-1.306a1 1 0 0 0-.275-.275C9.053 9 8.702 9 8 9c-2.828 0-4.243 0-5.121.879C2 10.757 2 12.17 2 14.999v1c0 2.83 0 4.243.879 5.122C3.757 22 5.172 22 8 22h8c2.828 0 4.243 0 5.121-.879C22 20.242 22 18.828 22 16v-1c0-2.829 0-4.243-.879-5.121C20.243 9 18.828 9 16 9" />
                </svg>
              </button>
            </div>

            <div class="row ms-auto w-25">
              <div class="col-auto">
                <div class="dropup dropup-center">
                  <!-- ROLES -->
                  <button id="rolesBtn" class="btn dropdown-toggle" hx-swap="none" data-bs-toggle="dropdown"
                    data-bs-title="Assistant Roles">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                      <g fill="currentColor">
                        <path
                          d="M6.005 13.368c.029-.296.26-.6.638-.702c.379-.102.73.047.903.29a.75.75 0 0 0 1.22-.873c-.55-.77-1.552-1.123-2.511-.866c-.96.257-1.651 1.064-1.743 2.006a.75.75 0 1 0 1.493.145Zm5.796-1.553c.029-.296.26-.6.638-.702c.379-.102.73.047.903.289a.75.75 0 0 0 1.22-.872c-.55-.77-1.552-1.123-2.511-.866c-.96.257-1.651 1.063-1.743 2.006a.75.75 0 0 0 1.493.145Zm1.399 4.416l.448-.602a.75.75 0 0 1-.885 1.211l-.01-.006a2.06 2.06 0 0 0-.485-.2c-.361-.098-.93-.163-1.686.04c-.756.202-1.215.543-1.48.808a2.064 2.064 0 0 0-.32.416l-.005.01a.75.75 0 0 1-1.372-.607l.689.298l-.689-.298l.001-.001v-.002l.003-.004l.003-.008l.011-.023l.032-.064c.027-.051.065-.118.115-.196c.1-.156.252-.36.469-.578c.436-.439 1.124-.924 2.155-1.2c1.031-.277 1.87-.2 2.467-.038c.297.08.53.18.695.266a2.682 2.682 0 0 1 .257.151l.02.015l.009.005l.003.003h.001l.002.002l-.447.602Z" />
                        <path fill-rule="evenodd"
                          d="m13.252 2.25l.042.02c1.167.547 1.692.791 2.235.963c.193.061.387.116.583.164c.552.134 1.122.197 2.395.334l.045.004c.808.087 1.48.16 2.01.28c.554.127 1.054.328 1.448.743c.23.24.414.521.546.827c.225.52.226 1.064.144 1.64c-.08.554-.253 1.232-.464 2.056l-.856 3.339c-.716 2.793-2.533 4.345-4.357 5.189c-.725 1.574-1.863 2.78-2.804 3.583l-.021.018c-.25.214-.497.425-.82.61c-.335.191-.724.34-1.269.493c-.544.152-.953.227-1.338.236c-.37.009-.687-.045-1.006-.1l-.028-.004c-2.321-.394-6.012-1.714-7.117-6.025l-.856-3.34c-.21-.823-.384-1.5-.464-2.056c-.082-.575-.081-1.118.144-1.639c.132-.306.317-.586.546-.827c.394-.415.894-.616 1.448-.742c.53-.122 1.201-.194 2.01-.28l.045-.005c.52-.056.921-.1 1.253-.14l.625-2.44c.211-.824.385-1.501.582-2.024c.203-.54.466-1.017.92-1.358c.265-.2.565-.348.884-.439c.55-.156 1.084-.066 1.622.113c.516.172 1.132.46 1.873.808Zm6.675 9.997c-.412 1.608-1.26 2.701-2.263 3.45a7.953 7.953 0 0 0-.18-3.207l-.93-3.632a.746.746 0 0 0 .338-.263c.173-.242.525-.39.904-.289c.378.101.608.406.637.702a.75.75 0 1 0 1.493-.145c-.091-.942-.783-1.749-1.742-2.006a2.37 2.37 0 0 0-2.084.416a6.985 6.985 0 0 0-.053-.146c-.203-.54-.466-1.017-.92-1.358a2.698 2.698 0 0 0-.884-.439c-.52-.147-1.026-.075-1.533.085a2.448 2.448 0 0 0-.322-.111c-.96-.257-1.962.096-2.512.866a.748.748 0 0 0-.132.547c-.55.252-.908.4-1.273.516l-.092.03l.434-1.697c.225-.877.38-1.474.543-1.91c.161-.428.296-.596.417-.687c.12-.09.254-.156.393-.196c.133-.038.329-.043.74.094c.422.14.958.39 1.752.762l.053.025c1.1.515 1.717.804 2.364 1.01c.225.07.453.134.682.19c.66.16 1.332.233 2.531.362l.059.006c.865.093 1.448.157 1.88.256c.418.095.591.203.696.313c.106.111.193.243.256.39c.067.154.101.377.036.83c-.066.465-.219 1.063-.443 1.939l-.845 3.297Zm-6.832-5.38c-.423.14-.959.39-1.753.762l-.053.025c-1.1.515-1.717.804-2.364 1.01c-.225.07-.453.134-.682.19c-.66.16-1.332.233-2.531.362l-.059.006c-.865.093-1.448.157-1.88.256c-.418.095-.591.203-.696.313a1.328 1.328 0 0 0-.256.39c-.067.154-.101.377-.036.83c.066.465.219 1.063.443 1.939l.845 3.297c.882 3.44 3.798 4.56 5.916 4.92c.348.059.532.088.746.082c.21-.005.486-.045.97-.18c.483-.136.742-.245.929-.352c.19-.109.338-.232.611-.465c1.67-1.425 3.672-3.936 2.787-7.39l-.845-3.296c-.225-.877-.38-1.474-.543-1.91c-.161-.428-.296-.596-.417-.687a1.198 1.198 0 0 0-.393-.196c-.133-.038-.329-.043-.74.094Z"
                          clip-rule="evenodd" />
                      </g>
                    </svg>
                  </button>
                  <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" onclick="setRole('chat')">Chat</a></li>
                    <li><a class="dropdown-item" href="#" onclick="setRole('summary')">Summary</a></li>
                    <li><a class="dropdown-item" href="#" onclick="setRole('cot')">Analyst</a></li>
                    <li><a class="dropdown-item" href="#" onclick="setRole('cot_advanced')">Engineer</a></li>
                    <li><a class="dropdown-item" href="#" onclick="setRole('software_dev')">Developer</a></li>
                    <li><a class="dropdown-item" href="#" onclick="setRole('code_review')">Code Review</a></li>
                    <li><a class="dropdown-item" href="#" onclick="setRole('image_bot')">Image Bot</a></li>
                  </ul>
                </div>
              </div>

              <!-- Models Config -->
              <div class="col-auto">
                <button class="btn" hx-post="/modelcards" hx-target="#info" hx-preserve="#chat"
                  hx-swap="innerHTML transition:true" data-bs-toggle="tooltip" data-bs-title="Language Models">
                  <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <g fill="none">
                      <path stroke="#ffffff" stroke-linecap="round" stroke-width="1.5"
                        d="M9 16c.85.63 1.885 1 3 1s2.15-.37 3-1" />
                      <ellipse cx="15" cy="10.5" fill="#ffffff" rx="1" ry="1.5" />
                      <ellipse cx="9" cy="10.5" fill="#ffffff" rx="1" ry="1.5" />
                      <path stroke="#ffffff" stroke-linecap="round" stroke-width="1.5"
                        d="M22 14c0 3.771 0 5.657-1.172 6.828C19.657 22 17.771 22 14 22m-4 0c-3.771 0-5.657 0-6.828-1.172C2 19.657 2 17.771 2 14m8-12C6.229 2 4.343 2 3.172 3.172C2 4.343 2 6.229 2 10m12-8c3.771 0 5.657 0 6.828 1.172C22 4.343 22 6.229 22 10" />
                    </g>
                  </svg>
                </button>
              </div>

              <!-- SETTINGS -->
              <div class="col-auto">
                <button class="btn" data-bs-target="#modal-settings" data-bs-toggle="tooltip" data-bs-title="Settings">
                  <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <g fill="none" stroke="#ffffff" stroke-width="1.5">
                      <circle cx="12" cy="12" r="3" />
                      <path
                        d="M13.765 2.152C13.398 2 12.932 2 12 2c-.932 0-1.398 0-1.765.152a2 2 0 0 0-1.083 1.083c-.092.223-.129.484-.143.863a1.617 1.617 0 0 1-.79 1.353a1.617 1.617 0 0 1-1.567.008c-.336-.178-.579-.276-.82-.308a2 2 0 0 0-1.478.396C4.04 5.79 3.806 6.193 3.34 7c-.466.807-.7 1.21-.751 1.605a2 2 0 0 0 .396 1.479c.148.192.355.353.676.555c.473.297.777.803.777 1.361c0 .558-.304 1.064-.777 1.36c-.321.203-.529.364-.676.556a2 2 0 0 0-.396 1.479c.052.394.285.798.75 1.605c.467.807.7 1.21 1.015 1.453a2 2 0 0 0 1.479.396c.24-.032.483-.13.819-.308a1.617 1.617 0 0 1 1.567.008c.483.28.77.795.79 1.353c.014.38.05.64.143.863a2 2 0 0 0 1.083 1.083C10.602 22 11.068 22 12 22c.932 0 1.398 0 1.765-.152a2 2 0 0 0 1.083-1.083c.092-.223.129-.483.143-.863c.02-.558.307-1.074.79-1.353a1.617 1.617 0 0 1 1.567-.008c.336.178.579.276.819.308a2 2 0 0 0 1.479-.396c.315-.242.548-.646 1.014-1.453c.466-.807.7-1.21.751-1.605a2 2 0 0 0-.396-1.479c-.148-.192-.355-.353-.676-.555A1.617 1.617 0 0 1 19.562 12c0-.558.304-1.064.777-1.36c.321-.203.529-.364.676-.556a2 2 0 0 0 .396-1.479c-.052-.394-.285-.798-.75-1.605c-.467-.807-.7-1.21-1.015-1.453a2 2 0 0 0-1.479-.396c-.24.032-.483.13-.82.308a1.617 1.617 0 0 1-1.566-.008a1.617 1.617 0 0 1-.79-1.353c-.014-.38-.05-.64-.143-.863a2 2 0 0 0-1.083-1.083Z" />
                    </g>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>

    <div id="scroll-to-bottom-btn" class="btn btn-primary bg-gradient"
      style="display: none; position: absolute; bottom: 100px; left: 50%; transform: translateX(-50%); background-color: var(--et-btn-info);">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
        <g fill="currentColor">
          <path fill-rule="evenodd"
            d="M4.43 10.512a.75.75 0 0 1 1.058-.081L12 16.012l6.512-5.581a.75.75 0 1 1 .976 1.138l-7 6a.75.75 0 0 1-.976 0l-7-6a.75.75 0 0 1-.081-1.057Z"
            clip-rule="evenodd" />
          <path d="M5 6.25a.75.75 0 0 0-.488 1.32l7 6c.28.24.695.24.976 0l7-6A.75.75 0 0 0 19 6.25H5Z" />
        </g>
      </svg>
    </div>
  </div>

  <script src="js/marked/marked.min.js"></script>
  <!-- <script src="js/events.js"></script> -->
  <script src="js/workflows.js"></script>
  <script src="https://unpkg.com/@antonz/runno@0.6.1/dist/runno.js"></script>
  <script src="https://unpkg.com/@antonz/codapi@0.17.0/dist/engine/wasi.js"></script>
  <script src="https://unpkg.com/@antonz/codapi@0.17.0/dist/snippet.js"></script>
  <script src="https://unpkg.com/@antonz/codapi@0.17.0/dist/settings.js"></script>
  <!-- <script src="https://unpkg.com/@antonz/codapi@0.17.0/dist/status.js"></script> -->
  <script>
    var userHasScrolled = false;

    document.addEventListener('alpine:init', () => {
      Alpine.store('dataStore', {
        init() {
          this.fetchData();
        },
        data: {},
        async fetchData() {
          try {
            //await getTools()
            let response = await fetch('/config');
            this.data = await response.json();
            console.log('Data fetched:', this.data);

            response = await fetch('/model/selected');
            let modelName = await response.json();
            console.log('Selected model:', modelName);

            // Print the keys of the data object
            console.log('Data keys:', Object.keys(this.data));

            // Set the tool toggles to the value of the enabled key for each tool
            Object.keys(this.data.Tools).forEach((tool) => {
              console.log('Tool:', tool);
              console.log('Enabled:', this.data.Tools[tool].Enabled);
              console.log('TopN:', this.data.Tools[tool].TopN);
              console.log('Search Backend:', this.data.Tools["WebSearch"].Name);

              document.getElementById("memory-switch").checked = this.data.Tools["Memory"].Enabled;
              // set the topn value for the slider
              document.getElementById("memory-slider").value = this.data.Tools["Memory"].TopN;
              document.getElementById("memory-topn-value").innerText = this.data.Tools["Memory"].TopN;

              document.getElementById("webget-switch").checked = this.data.Tools["WebGet"].Enabled;

              document.getElementById("websearch-switch").checked = this.data.Tools["WebSearch"].Enabled;

              document.getElementById("websearch-slider").value = this.data.Tools["WebSearch"].TopN;
              document.getElementById("websearch-topn-value").innerText = this.data.Tools["WebSearch"].TopN;

              if (this.data.Tools["WebSearch"].Name == "sxng") {
                // Add a class to the sxng radio button to show it as selected
                document.getElementById("sxng-radio").classList.add("checked");

                // Add the checked parameter to the sxng radio button
                document.getElementById("sxng-radio").checked = true;
              }
              else {
                // Add a class to the sxng radio button to show it as selected
                document.getElementById("ddg-radio").classList.add("checked");
                document.getElementById("ddg-radio").checked = true;
              }
            });

          } catch (error) {
            console.error('Error fetching data:', error);
          }
        }
      });
    });

    function dataStore() {
      return Alpine.store('dataStore');
    }

    const textarea = document.getElementById('message');
    const maxRows = 8;

    textarea.addEventListener('input', function () {
      this.style.height = 'auto';
      this.style.height = `${Math.min(this.scrollHeight, this.clientHeight * maxRows)}px`;
    });

    const tooltipTriggerList = document.querySelectorAll(
      "[data-bs-toggle='tooltip']"
    );
    const tooltipList = [...tooltipTriggerList].map(
      (tooltipTriggerEl) => new bootstrap.Tooltip(tooltipTriggerEl)
    );

    // Function to toggle button state and border
    function toggleButtonState(buttonId) {
      const button = document.getElementById(buttonId);
      button.style.border = button.style.border ? '' : '2px solid purple'; // Toggle border
    }

    document.getElementById('imgGenBtn').addEventListener('click', () => {
      toggleButtonState('imgGenBtn');
      downloadImageModel('dreamshaper-8-turbo-sdxl'); // Keep existing functionality
    });

    function downloadImageModel(modelName) {
      // Toggle a border on the imgGenBtn
      console.log("Downloading model: ", modelName);

      // Toggle a border on the imgGenBtn
      const imgGenBtn = document.getElementById('imgGenBtn');
      imgGenBtn.style.border = imgGenBtn.style.border ? '' : '2px solid purple';

      // Fetch the download route
      fetch(`/imgmodel/download?model=${modelName}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ modelName }),
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to download model');
          }
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    document.getElementById('message').addEventListener('keydown', function (event) {
      if (event.key === 'Enter' || event.key === 'Return') {
        if (!event.shiftKey) {
          var messageInput = document.getElementById('message');
          messageInput.value += docContent;
          event.preventDefault(); // Prevent the default behavior of the Enter key
          document.getElementById('send').click(); // Trigger the click event on the submit button
          textarea.style.height = 'auto';
          textarea.style.height = `${Math.min(this.scrollHeight, this.clientHeight * 1)}px`;
        } else {
          // Insert a new line instead of submitting the form
          var messageInput = document.getElementById('message');
          messageInput.value += '\n';
        }
      }
    });

    function setRole(role) {
      fetch(`/chat/role/${role}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })
        .then(response => response.json())
        .then(data => {
          console.log('Success:', data);
        })
        .catch((error) => {
          console.error('Error:', error);
        })
    }
    // htmx.logAll();
  </script>
</body>

</html>--- END /Users/arturoaquino/Documents/eternal/public/templates/index.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/model.html ---
<div id="models-container" class="row">
  <div class="h-auto">
    <div class="h-auto dropdown dropdown-center mx-2">
      <button class="btn btn-secondary bg-gradient dropdown-toggle w-100" type="button" data-bs-toggle="dropdown"
        aria-expanded="false">
        Language Models
      </button>
      <ul class="dropdown-menu w-100" style="background-color: var(--et-card-bg);">
        <li>
          <h6 class="dropdown-header">Public Models</h6>
        </li>
        {{range .models}}
        {{if (or (eq .Name "openai-gpt-4o") (eq .Name "google-gemini-1.5") (eq .Name "anthropic-claude-3.5-sonnet"))}}
        <li><a href="/modelcards" hx-get="/modelcards" class="dropdown-item"
            onclick="selectModel('{{.Name}}')">{{.Name}}</a></li>
        {{end}}
        {{end}}
        <li>
          <hr class="dropdown-divider">
        </li>
        <li>
          <h6 class="dropdown-header">Local Models</h6>
        </li>
        {{range .models}}
        {{if not (or (eq .Name "openai-gpt-4o") (eq .Name "google-gemini-1.5") (eq .Name "anthropic-claude-3.5-sonnet"))}}
        <li><a href="#" class="dropdown-item" onclick="selectModel('{{.Name}}')">{{.Name}}</a></li>
        {{end}}
        {{end}}
      </ul>
    </div>
  </div>
  <div class="w-100 d-none" id="progress-download" hx-ext='sse' sse-connect='/sseupdates' sse-swap='message'
    hx-trigger='load'>
  </div>
</div>

<!-- Container to display selected model information -->
<div id="model-info-container">
</div>

<script>
  async function selectModel(modelName) {
    try {
      // Set the selected model in the database
      const selectedModelResponse = await fetch(`/model/select/${modelName}/add`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const response = await fetch(`/modeldata/${modelName}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      const modelData = await response.json();
      console.log(modelData);

      if (modelData) {
        const modelInfoContainer = document.getElementById('model-info-container');

        if (!modelData.Downloaded && !['openai-gpt-4o', 'google-gemini-1.5', 'anthropic-claude-3.5-sonnet'].includes(modelData.Name)) {
          modelInfoContainer.innerHTML = `
        <div class="card h-100 mx-2" style="background-color: var(--et-card-bg);" data-model-name="${modelData.Name}">
          <div class="card-header">${modelData.Name}</div>
          <div class="card-body tab-content mh-100">
            <p><a href="${modelData.GGUFInfo}" target="_blank">Model Homepage</a></p>
            <div id="model-download">
              <button id="model-download-btn" class="btn btn-primary bg-gradient" style="background-color: var(--et-btn-info);" onclick="downloadModel('${modelData.Name}')">Download</button>
              </button>
              </div>
            </div>
            </div>
          </div>
        </div>
        `;
        } else {
          // Handle already downloaded models
          modelInfoContainer.innerHTML = `
        <div class="card h-100 mx-2" style="background-color: var(--et-card-bg);" data-model-name="${modelData.Name}">
          <div class="card-header">${modelData.Name}</div>
          <div class="card-body tab-content mh-100">
            <p><a href="${modelData.GGUFInfo}" target="_blank">Model Homepage</a></p>
            <p><strong>Context:</strong> 
              <input type="range" class="form-range" min="2048" max="${modelData.Options.ctx_size}" step="1024" value="${modelData.Options.ctx_size}" id="ctx-size-slider">
              <span id="ctx-size-value">${modelData.Options.ctx_size}</span>
            </p>
            <p><strong>Temperature:</strong> 
              <input type="range" class="form-range" min="0.0" max="0.9" step="0.1" value="${modelData.Options.temp}" id="temp-slider">
              <span id="temp-value">${modelData.Options.temp}</span>
            </p>
            <p><strong>TopP:</strong> 
              <input type="range" class="form-range" min="0.0" max="1.0" step="0.1" value="${modelData.Options.top_p}" id="topp-slider">
              <span id="topp-value">${modelData.Options.top_p}</span>
            </p>
            <p><strong>TopK:</strong> 
              <input type="range" class="form-range" min="5" max="100" step="5" value="${modelData.Options.top_k}" id="topk-slider">
              <span id="topk-value">${modelData.Options.top_k}</span>
            </p>
            <p><strong>Repetition Penalty:</strong> 
              <input type="range" class="form-range" min="0.0" max="50.0" step="0.1" value="${modelData.Options.repeat_penalty}" id="repeat-penalty-slider">
              <span id="repeat-penalty-value">${modelData.Options.repeat_penalty}</span>
            </p>
            
            <div class="accordion" id="promptTemplateAccordion">
              <div class="accordion-item">
                <h2 class="accordion-header">
                  <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#promptTemplateContent" aria-expanded="false" aria-controls="promptTemplateContent">
                    Prompt Template
                  </button>
                </h2>
                // Style the pre element so it displays scrollbars by default
                <div id="promptTemplateContent" class="accordion-collapse collapse" data-bs-parent="#promptTemplateAccordion">
                  <div class="accordion-body" style="overflow: auto;">
                    <pre>${modelData.Options.prompt}</pre>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <button id="saveModelParamsBtn" class="btn btn-primary bg-gradient" style="background-color: var(--et-btn-info);" onclick="saveModelParams('${modelData.Name}')">Save</button>
        </div>
        `;

          // Add event listeners to update the displayed value as the slider is moved
          document.getElementById('ctx-size-slider').addEventListener('input', function () {
            document.getElementById('ctx-size-value').textContent = this.value;
          });

          document.getElementById('temp-slider').addEventListener('input', function () {
            document.getElementById('temp-value').textContent = this.value;
          });

          document.getElementById('topp-slider').addEventListener('input', function () {
            document.getElementById('topp-value').textContent = this.value;
          });

          document.getElementById('topk-slider').addEventListener('input', function () {
            document.getElementById('topk-value').textContent = this.value;
          });

          document.getElementById('repeat-penalty-slider').addEventListener('input', function () {
            document.getElementById('repeat-penalty-value').textContent = this.value;
          });

          // Add event listener to save the model parameters
          const saveButton = document.getElementById('saveModelParamsBtn');
          saveButton.addEventListener('click', async () => {
            try {
              const ctxSize = parseInt(document.getElementById('ctx-size-slider').value);
              const temp = parseFloat(document.getElementById('temp-slider').value);
              const top_p = parseFloat(document.getElementById('topp-slider').value);
              const top_k = parseInt(document.getElementById('topk-slider').value);
              const repeat_penalty = parseFloat(document.getElementById('repeat-penalty-slider').value);

              const modelParams = {
                Name: modelData.Name,
                Options: {
                  ctx_size: ctxSize,
                  temp: temp,
                  top_p: top_p,
                  top_k: top_k,
                  repeat_penalty: repeat_penalty,
                },
              };

              const response = await fetch('/model/set/params', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(modelParams),
              });

              if (response.ok) {
                console.log('Settings saved successfully');
              } else {
                console.error('Error saving settings');
              }
            } catch (error) {
              console.error('Error sending request:', error);
            }
          });
        }
      } else {
        console.error('Error fetching model data');
      }
    } catch (error) {
      console.error('Error fetching model data:', error);
    }
  }

  function downloadModel(modelName) {
    // Display the progress bar
    const buttonDownload = document.getElementById(`model-download-btn`);
    const progressContainer = document.getElementById(`progress-download`);
    const downloadContainer = document.getElementById(`model-download`);

    // Move the downloadContainer to the progressContainer
    downloadContainer.appendChild(progressContainer);

    // Delete the download button and show the download progress
    buttonDownload.remove();
    progressContainer.classList.remove('d-none');

    // Send a request to download the model
    console.log("Downloading model: ", modelName);

    // Fetch the download route
    fetch(`/model/download?model=${modelName}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ modelName }),
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to download model');
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
  }

</script>--- END /Users/arturoaquino/Documents/eternal/public/templates/model.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/shell.html ---

<div
  x-data="loadterm()"
>
  <div x-disclosure>
    <div
      x-disclosure:button
    >
      <span class="shellButton">CloudBox WebShell</span>
  </div>

    <div x-disclosure:panel x-collapse>
      <div id="terminal" style="width: 100%; overflow: hidden;"></div>
    </div>
  </div>
</div>

<script type="text/javascript">
  // Add an event listener to the shell id to load the terminal
  document.getElementById("shell").addEventListener("click", loadterm);


  function loadterm() {
    console.log("loadterm");
    var conn;
    var term = new Terminal();
    var fitAddon = new FitAddon.FitAddon();
    term.loadAddon(fitAddon);
    term.open(document.getElementById("terminal"));
    fitAddon.fit();
    term.writeln("Hello from \x1B[1;3;31mCloudBox!\x1B[0m");

    function sendMessage(message) {
      if (!conn) {
        return;
      }
      if (!message) {
        return;
      }
      termConn.send(message);
    }

    if (window["WebSocket"]) {
      termConn = new WebSocket("wss://" + document.location.host + "/host/shell");
      termConn.onopen = function (evt) {
        term.writeln("Connected to CloudBox host terminal.");
      };
      termConn.onclose = function (evt) {
        term.writeln("Connection closed.");
      };
      termConn.onmessage = function (evt) {
        term.write("\r" + evt.data);
        //term.write(evt.data);
      };
      termConn.onerror = function (evt) {
        term.writeln("ERROR: " + evt.data);
      };
    } else {
      term.writeln("Your browser does not support WebSockets.");
    }

    var inputBuffer = "";

    term.onKey(function (keyEvent) {
      const key = keyEvent.key;

      if (key === "\r") {
        // Enter key
        term.write("\n"); // Add a newline and a prompt before the next command
        sendMessage(inputBuffer);
        inputBuffer = "";
      } else if (key === "\u007F" || key === "\b") {
        // Backspace or Delete key
        if (inputBuffer.length > 0) {
          inputBuffer = inputBuffer.slice(0, inputBuffer.length - 1);
          term.write("\b \b"); // Move cursor back, write a space to erase, then move cursor back again
        }
      } else if (key.length === 1) {
        inputBuffer += key;
        term.write(key);
      }
    });
  }
</script>
--- END /Users/arturoaquino/Documents/eternal/public/templates/shell.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/tools.html ---
<div id="tools-container" class="row">
  <div class="col">
    <!-- Team Card -->
    <div class="card mx-2 mb-2" style="background-color: var(--et-card-bg);">
      <div class="card-header">
        <!-- Team Header -->
        <span class="fs-6">Team</span>
        <!-- Select Team  -->
        <select class="form-select" id="team-select" onchange="selectTeam()">
          <option value="team1">Platform Architecture</option>
          <option value="team2">Team 2</option>
          <option value="team3">Team 3</option>
        </select>
      </div>
      <div class="card-body tab-content mh-100"></div>
    </div>

    <!-- Memory Card -->
    <div class="card mx-2 mb-2" style="background-color: var(--et-card-bg);">
      <div class="card-header">
        <div class="form-check-reverse form-switch">
          <input class="form-check-input" type="checkbox" role="switch" value="" id="memory-switch" onclick="updateMemoryTool()">
          <label class="form-check-label" for="memory-switch">
            Chat Memory
          </label>
        </div>
      </div>
      <div class="card-body tab-content mh-100">
        <div>
          <p class="mb-0"><strong>TopN:</strong> 
            <input type="range" class="form-range" min="1" max="25" step="2" value="1" id="memory-slider" oninput="updateMemoryTool()">
            <span id="memory-topn-value">1</span>
          </p>
        </div>
      </div>
    </div>

    <!-- Web Retrieval Card -->
    <div class="card mx-2 mb-2" style="background-color: var(--et-card-bg);">
      <div class="card-header">
        <div class="form-check-reverse form-switch">
          <input class="form-check-input" type="checkbox" role="switch" value="" id="webget-switch" onclick="updateWebgetTool()">
          <label class="form-check-label" for="webget-switch">
            Web Retrieval
          </label>
        </div>
      </div>
      <div class="card-body tab-content mh-100">
        <div>
          <p class="mb-0">Web Retrieval attempts to fetch the contents of a URL in the user's prompt to use as reference for an LLM response.</p>
        </div>
      </div>
    </div>

    <!-- Web Search Card -->
    <div class="card mx-2 mb-2" style="background-color: var(--et-card-bg);">
      <div class="card-header">
        <div class="form-check-reverse form-switch">
          <input class="form-check-input" type="checkbox" role="switch" value="" id="websearch-switch" onclick="updateSearchTool()">
          <label class="form-check-label" for="websearch-switch">
            Web Search
          </label>
        </div>
      </div>
      <div class="card-body tab-content mh-100">
        <div>
          <p class="mb-0">Web Search fetches search results as reference for LLM response.</p>
          <br>
          <label class="form-label">Search Backend</label>
          <div class="form-check">
            <input class="form-check-input" type="radio" value="backend" name="radio-group-search" id="ddg-radio">
            <label class="form-check-label" for="ddg-radio">
              DDG
            </label>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="radio" value="frontend" name="radio-group-search" id="sxng-radio">
            <label class="form-check-label" for="sxng-radio">
              SXNG
            </label>
          </div>
          <p class="mb-0"><strong>TopN - Number of web search results to retrieve:</strong> 
            <input type="range" class="form-range" min="1" max="6" step="1" value="1" id="websearch-slider" oninput="updateSearchTool()">
            <span id="websearch-topn-value">1</span>
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function postToolValue(toolName, enabled, topN) {
    fetch(`/tool/${toolName}/${enabled}/${topN}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log(data.message);
    })
    .catch(error => {
      console.error('Error:', error);
    });
  }

  async function getTools() {
    try {
      const response = await fetch('/tools/list');
      const tools = await response.json();
      const toolView = document.getElementById('tool-view');
      toolView.innerHTML = '';

      tools.forEach(tool => {
        console.log('Tool:', tool.Name, 'Enabled:', tool.Enabled);
      });
    } catch (error) {
      console.error('Error fetching tools:', error);
    }
  }

  function updateMemoryTool() {
    const enabled = document.getElementById('memory-switch').checked;
    const slider = document.getElementById('memory-slider');
    const valueLabel = document.getElementById('memory-topn-value');
    valueLabel.innerText = slider.value;
    postToolValue('memory', enabled, slider.value);
  }

  function updateWebgetTool() {
    const enabled = document.getElementById('webget-switch').checked;
    postToolValue('webget', enabled, 1); // Assuming webget doesn't have a slider, we pass 1 as topN
  }

  function updateSearchTool() {
    const enabled = document.getElementById('websearch-switch').checked;
    const slider = document.getElementById('websearch-slider');
    const valueLabel = document.getElementById('websearch-topn-value');
    valueLabel.innerText = slider.value;
    postToolValue('websearch', enabled, slider.value);
  }
</script>
--- END /Users/arturoaquino/Documents/eternal/public/templates/tools.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/handlers_chat.go ---
package main

import (
	"bufio"
	"bytes"
	"context"
	"encoding/json"
	"eternal/pkg/documents"
	"eternal/pkg/embeddings"
	"eternal/pkg/llm"
	"eternal/pkg/llm/anthropic"
	"eternal/pkg/llm/google"
	"eternal/pkg/llm/openai"
	"eternal/pkg/vecstore"
	"eternal/pkg/web"
	"fmt"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/blevesearch/bleve/v2"
	index "github.com/blevesearch/bleve_index_api"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/log"
	"github.com/gofiber/websocket/v2"
	"github.com/nlpodyssey/cybertron/pkg/models/bert"
	"github.com/nlpodyssey/cybertron/pkg/tasks"
	"github.com/nlpodyssey/cybertron/pkg/tasks/textencoding"
	"github.com/pterm/pterm"
	"github.com/valyala/fasthttp"
)

type ChatTurnMessage struct {
	ID       string `json:"id"`
	Prompt   string `json:"prompt"`
	Response string `json:"response"`
	Model    string `json:"model"`
}

// handleChatSubmit handles the submission of chat messages.
func handleChatSubmit(config *AppConfig) fiber.Handler {
	return func(c *fiber.Ctx) error {
		userPrompt := c.FormValue("userprompt")
		var wsroute string

		// selectedModels, err := GetSelectedModels(sqliteDB.db)
		// if err != nil {
		// 	log.Errorf("Error getting selected models: %v", err)
		// 	return c.Status(500).SendString("Server Error")
		// }

		var model ModelParams
		// Retrieve the model parameters from the database.
		err := sqliteDB.First(currentProject.Team.Assistants[0].Name, &model)
		if err != nil {
			log.Errorf("Error getting model %s: %v", currentProject.Team.Assistants[0].Name, err)
			return err
		}

		pterm.Info.Println("Team: ", currentProject.Team)

		if len(currentProject.Team.Assistants) > 0 {
			wsroute = fmt.Sprintf("ws://%s:%s/ws", config.ServiceHosts["llm"]["llm_host_1"].Host, config.ServiceHosts["llm"]["llm_host_1"].Port)
		} else {
			return c.JSON(fiber.Map{"error": "No models selected"})
		}

		turnID := IncrementTurn()

		return c.Render("templates/chat", fiber.Map{
			"username":  config.CurrentUser,
			"message":   userPrompt,
			"assistant": config.AssistantName,
			"model":     model.Name,
			"turnID":    turnID,
			"wsRoute":   wsroute,
			"hosts":     config.ServiceHosts["llm"],
		})
	}
}

// handleGetChats retrieves and returns all chat records.
func handleGetChats() fiber.Handler {
	return func(c *fiber.Ctx) error {
		chats, err := GetChats(sqliteDB.db)
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "could not get chats"})
		}
		return c.Status(fiber.StatusOK).JSON(chats)
	}
}

// handleGetChatByID retrieves and returns a chat record by its ID.
func handleGetChatByID() fiber.Handler {
	return func(c *fiber.Ctx) error {
		id, err := strconv.ParseInt(c.Params("id"), 10, 64)
		if err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "invalid id"})
		}

		chat, err := GetChatByID(sqliteDB.db, id)
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "could not get chat"})
		}
		return c.Status(fiber.StatusOK).JSON(chat)
	}
}

// handleUpdateChat updates a chat record by its ID.
func handleUpdateChat() fiber.Handler {
	return func(c *fiber.Ctx) error {
		id, err := strconv.ParseInt(c.Params("id"), 10, 64)
		if err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "invalid id"})
		}

		chat := new(Chat)
		if err := c.BodyParser(chat); err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "cannot parse JSON"})
		}

		err = UpdateChat(sqliteDB.db, id, chat.Prompt, chat.Response, chat.ModelName)
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "could not update chat"})
		}
		return c.SendStatus(fiber.StatusNoContent)
	}
}

// handleDeleteChat handles the deletion of a chat by its ID.
func handleDeleteChat() fiber.Handler {
	return func(c *fiber.Ctx) error {
		// Parse the chat ID from the request parameters.
		id, err := strconv.ParseInt(c.Params("id"), 10, 64)
		if err != nil {
			// Return a bad request status if the ID is invalid.
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "invalid id"})
		}

		// Attempt to delete the chat from the database.
		err = DeleteChat(sqliteDB.db, id)
		if err != nil {
			// Return an internal server error status if the deletion fails.
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "could not delete chat"})
		}
		// Return a no content status if the deletion is successful.
		return c.SendStatus(fiber.StatusNoContent)
	}
}

// handleListProjects retrieves and returns a list of projects from the database.
func handleListProjects() fiber.Handler {
	return func(c *fiber.Ctx) error {
		projects, err := sqliteDB.ListProjects()
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "could not get projects"})
		}
		return c.Status(fiber.StatusOK).JSON(projects)
	}
}

// handleUpload handles file uploads and saves them to the specified directory.
func handleUpload(config *AppConfig) fiber.Handler {
	return func(c *fiber.Ctx) error {
		pterm.Warning.Println("Uploads route hit")

		form, err := c.MultipartForm()
		if err != nil {
			return err
		}

		files := form.File["file"]
		for _, file := range files {
			filename := filepath.Join(config.DataPath, "web", "uploads", file.Filename)
			pterm.Warning.Printf("Uploading file: %s\n", filename)
			if err := c.SaveFile(file, filename); err != nil {
				return err
			}
			log.Infof("Uploaded file %s to %s", file.Filename, filename)

			// If the file is a pdf, extract the text content and print it as Markdown.
			if strings.HasSuffix(file.Filename, ".pdf") {
				pdfDoc, err := documents.GetPdfContents(filename)
				if err != nil {
					pterm.Error.Println(err)
				}

				err = searchIndex.Index(file.Filename, pdfDoc)
				if err != nil {
					log.Errorf("Error storing chat message in Bleve: %v", err)
				}

				return c.JSON(fiber.Map{"file": file.Filename, "content": pdfDoc})
			}
		}

		// return the file path of all the documents uploaded
		return c.JSON(fiber.Map{"files": files})
	}
}

// handleDPSearch handles search requests using DuckDuckGo.
func handleDPSearch() fiber.Handler {
	return func(c *fiber.Ctx) error {
		// Retrieve the search query from the request.
		query := c.Query("q")
		res := web.SearchDDG(query)

		// Return an internal server error status if no results are found.
		if len(res) == 0 {
			return c.Status(fiber.StatusInternalServerError).SendString("Error retrieving search results")
		}

		// Return the search results as a JSON response.
		urls := res
		return c.Status(fiber.StatusOK).JSON(fiber.Map{"urls": urls})
	}
}

// handleSSEUpdates handles Server-Sent Events (SSE) for updates.
func handleSSEUpdates() fiber.Handler {
	return func(c *fiber.Ctx) error {
		// Set the necessary headers for SSE.
		c.Set("Content-Type", "text/event-stream")
		c.Set("Cache-Control", "no-cache")
		c.Set("Connection", "keep-alive")
		c.Set("Transfer-Encoding", "chunked")

		// Write updates to the response stream.
		c.Context().SetBodyStreamWriter(fasthttp.StreamWriter(func(w *bufio.Writer) {
			for {
				// Get the current download progress.
				progress := llm.GetDownloadProgress("sse-progress")
				msg := fmt.Sprintf("data: <div class='progress specific-h-25 m-4' role='progressbar' aria-label='download' aria-valuenow='%s' aria-valuemin='0' aria-valuemax='100'><div class='progress-bar progress-bar-striped progress-bar-animated' style='width: %s;'></div></div><div class='text-center fs-6'>Please refresh this page when the download completes.</br> Downloading...%s</div>\n\n", progress, progress, progress)

				// Write the progress message to the stream.
				if _, err := w.WriteString(msg); err != nil {
					pterm.Printf("Error writing to stream: %v", err)
					break
				}
				// Flush the writer to ensure the message is sent.
				if err := w.Flush(); err != nil {
					pterm.Printf("Error flushing writer: %v", err)
					break
				}

				// Sleep for 2 seconds before sending the next update.
				time.Sleep(2 * time.Second)
			}
		}))

		return nil
	}
}

// handleWebSocket handles WebSocket connections for general use.
func handleWebSocket(config *AppConfig) func(*websocket.Conn) {
	return func(c *websocket.Conn) {
		handleWebSocketConnection(c, config, func(wsMessage WebSocketMessage, chatMessage string) error {
			return nil
		})
	}
}

func handleWebSocketConnection(c *websocket.Conn, config *AppConfig, processMessage func(WebSocketMessage, string) error) {
	var responseBuffer bytes.Buffer
	var wsMessage WebSocketMessage
	var err error

	// Read and unmarshal the initial WebSocket message
	wsMessage, err = readAndUnmarshalMessage(c)
	if err != nil {
		log.Errorf("Error reading or unmarshalling message: %v", err)
		return
	}

	chatMessage := wsMessage.ChatMessage

	// Only perform the tool workflow if any of the tools are enabled
	if config.Tools.ImgGen.Enabled || config.Tools.Memory.Enabled || config.Tools.WebGet.Enabled || config.Tools.WebSearch.Enabled {
		chatMessage = performToolWorkflow(c, config, chatMessage)
	}

	// Loop through each assistant in the group and process the chat message
	for _, assistant := range currentProject.Team.Assistants {
		err = handleAssistantTurn(c, config, wsMessage, chatMessage, &responseBuffer, assistant)
		if err != nil {
			log.Errorf("Error processing model: %v", err)
			// return
		}
	}

	// Handle the completed chat turn
	handleChatTurnFinished(config, wsMessage, fmt.Errorf("%s", responseBuffer.String()))
}

func handleAssistantTurn(c *websocket.Conn, config *AppConfig, wsMessage WebSocketMessage, chatMessage string, responseBuffer *bytes.Buffer, assistant Assistant) error {
	var model ModelParams
	err := sqliteDB.First(assistant.Name, &model)
	if err != nil {
		return fmt.Errorf("error getting model %s: %v", assistant.Name, err)
	}

	role := assistant.Role.Name

	// get the role from the config that matches the name of the assistant role
	for _, r := range config.AssistantRoles {
		if r.Name == role {
			config.CurrentRoleInstructions = r.Instructions
		}
	}

	promptTemplate := model.Options.Prompt
	// fullInstructions := fmt.Sprintf("%s\n\n%s", config.CurrentRoleInstructions, chatMessage)
	fullInstructions := fmt.Sprintf("Query: %s\n\nPrevious Response: %s\n\n%s", chatMessage, responseBuffer.String(), config.CurrentRoleInstructions)
	fullPrompt := strings.ReplaceAll(promptTemplate, "{prompt}", fullInstructions)
	fullPrompt = strings.ReplaceAll(fullPrompt, "{system}", "You are a helpful AI assistant.")

	modelOpts := &llm.GGUFOptions{
		NGPULayers:    config.ServiceHosts["llm"]["llm_host_1"].GgufGPULayers,
		Model:         model.Options.Model,
		Prompt:        fullPrompt,
		CtxSize:       model.Options.CtxSize,
		Temp:          model.Options.Temp,
		RepeatPenalty: model.Options.RepeatPenalty,
		TopP:          model.Options.TopP,
		TopK:          model.Options.TopK,
	}

	// Insert an alert with the name and role of the assistant into the response buffer
	responseBuffer.WriteString(fmt.Sprintf("\n### %s - %s\n", assistant.Name, assistant.Role.Name))

	// invoke the correct handler based on the model name
	if strings.HasPrefix(model.Name, "openai-") {
		// Get the system template for the chat message.
		cpt := llm.GetSystemTemplate(chatMessage)
		return openai.StreamCompletionToWebSocket(*c, chatTurn, "gpt-4o", cpt.Messages, 0.3, config.OAIKey, responseBuffer)
	} else if strings.HasPrefix(model.Name, "google-") {
		apiKey := config.GoogleKey
		return google.StreamGeminiResponseToWebSocket(*c, chatTurn, chatMessage, apiKey, responseBuffer)
	} else if strings.HasPrefix(model.Name, "anthropic-") {
		apiKey := config.AnthropicKey

		// Prepare the messages for the completion request.
		messages := []anthropic.Message{
			{Role: "user", Content: chatMessage},
		}

		// Stream the completion response from Anthropic to the WebSocket.
		res := anthropic.StreamCompletionToWebSocket(*c, chatTurn, "claude-3-5-sonnet-20240620", messages, 0.3, apiKey, responseBuffer)
		if res != nil {
			pterm.Error.Println("Error in anthropic completion:", res)
		}
	} else {
		return llm.MakeCompletionWebSocket(*c, chatTurn, modelOpts, config.DataPath, responseBuffer)
	}

	return nil
}

// handleGoogleWebSocket handles WebSocket connections for Google.
// func handleGoogleWebSocket(config *AppConfig) func(*websocket.Conn) {
// 	return func(c *websocket.Conn) {
// 		apiKey := config.GoogleKey

// 		handleWebSocketConnection(c, config, func(wsMessage WebSocketMessage, chatMessage string) error {
// 			// Stream the Gemini response from Google to the WebSocket.
// 			return google.StreamGeminiResponseToWebSocket(*c, chatTurn, chatMessage, apiKey)
// 		})
// 	}
// }

// readAndUnmarshalMessage reads and unmarshals a WebSocket message.
func readAndUnmarshalMessage(c *websocket.Conn) (WebSocketMessage, error) {
	// Read the message from the WebSocket.
	_, messageBytes, err := c.ReadMessage()
	if err != nil {
		return WebSocketMessage{}, err
	}

	// Unmarshal the JSON message.
	var wsMessage WebSocketMessage
	err = json.Unmarshal(messageBytes, &wsMessage)
	if err != nil {
		return WebSocketMessage{}, err
	}

	return wsMessage, nil
}

// handleError handles errors that occur during message processing.
func handleChatTurnFinished(config *AppConfig, message WebSocketMessage, err error) {
	chatTurn++

	log.Errorf("Chat turn finished: %v", err)

	// Store the chat turn in the sqlite db.
	if _, err := CreateChat(sqliteDB.db, message.ChatMessage, err.Error(), message.Model); err != nil {
		pterm.Error.Println("Error storing chat in database:", err)
		return
	}

	if config.Tools.Memory.Enabled {

		// Get the timestamp for the chat message in human-readable format.
		timestamp := time.Now().Format("2006-01-02 15:04:05")

		memHeader := fmt.Sprintf("Previous chat - %s", timestamp)

		// Two examples of how to store chat messages in the Bleve index.
		// 1. Split the text and store each chunk in the index.
		// 2. Store the entire chat message in the index.
		// Split the chat message into chunks 500 characters long with a 200 character overlap.
		chunks := documents.SplitTextByCount(err.Error(), 500)

		// Prepend the header to all chunks.
		for i, chunk := range chunks {
			chunks[i] = fmt.Sprintf("%s\n%s", memHeader, chunk)
		}

		// 1. Store the chunk in Bleve.
		for _, chunk := range chunks {
			chatMessage := ChatTurnMessage{
				ID:       fmt.Sprintf("%d", time.Now().UnixNano()),
				Prompt:   message.ChatMessage,
				Response: chunk,
				Model:    message.Model,
			}

			err = searchIndex.Index(chatMessage.ID, chatMessage)
			if err != nil {
				log.Errorf("Error storing chat message in Bleve: %v", err)
			}
		}
		// 2. Store the entire chat message in Bleve.
		// chatMessage := ChatTurnMessage{
		// 	ID:       fmt.Sprintf("%d", time.Now().UnixNano()),
		// 	Prompt:   message.ChatMessage,
		// 	Response: err.Error(),
		// 	Model:    message.Model,
		// }

		// err = searchIndex.Index(chatMessage.ID, chatMessage)
		// if err != nil {
		// 	log.Errorf("Error storing chat message in Bleve: %v", err)
		// }
	}
}

// handleChatMemory retrieves and returns chat memory.
func handleChatMemory(config *AppConfig, chatMessage string) (string, error) {
	var document string

	topN := config.Tools.Memory.TopN

	// Create a search query
	query := bleve.NewQueryStringQuery(chatMessage)

	// Create a search request with the query and limit the results
	searchRequest := bleve.NewSearchRequestOptions(query, topN, 0, false)

	// Execute the search
	searchResults, err := searchIndex.Search(searchRequest)
	if err != nil {
		log.Errorf("Error searching index: %v", err)
		return "", err
	}

	// Print the search results
	for _, hit := range searchResults.Hits {
		doc, err := searchIndex.Document(hit.ID)
		if err != nil {
			log.Errorf("Error retrieving document: %v", err)
			continue
		}

		doc.VisitFields(func(field index.Field) {
			//fmt.Printf("%s: %s\n", field.Name(), field.Value())

			// Append the response field to the document and store it for later use
			if field.Name() == "response" {
				document = fmt.Sprintf("%s\n%s", document, field.Value())
			}
		})
	}

	modelPath := filepath.Join(config.DataPath, "models/HF/avsolatorio/GIST-small-Embedding-v0/avsolatorio/GIST-small-Embedding-v0")
	embeddings.GenerateEmbeddingForTask("chat", document, "txt", 4096, 1024, modelPath)

	searchRes := searchSimilarEmbeddings(config, "GIST-small-Embedding-v0", modelPath, chatMessage, topN)

	// Retrieve the most similar chunks of text from the chat embeddings
	for _, res := range searchRes {

		similarity := res.Similarity
		if similarity > 0.8 {
			//pterm.Info.Println("Most similar chunk of text:")
			//pterm.Info.Println(res.Word)
			document = fmt.Sprintf("%s\n%s", document, res.Word)
		}
	}

	return document, nil
}

// storeChat stores a chat in the database and generates embeddings for it.
// func storeChat(config *AppConfig, prompt string, response string) error {
// 	// Generate embeddings for the chat.
// 	pterm.Warning.Println("Generating embeddings for chat...")

// 	chatText := fmt.Sprintf("QUESTION: %s\n RESPONSE: %s", prompt, response)
// 	err := embeddings.GenerateEmbeddingForTask("chat", chatText, "txt", 500, 100, config.DataPath)
// 	if err != nil {
// 		pterm.Error.Println("Error generating embeddings:", err)
// 		return err
// 	}

// 	return nil
// }

// handleTextSplitAndIndex handles the splitting and indexing of text.
func handleTextSplitAndIndex(inputTags string, inputText string, chunkSize int, modelName string) error {
	// Split the input text into chunks.
	chunks := documents.SplitTextByCount(inputText, chunkSize)

	// Prepend the input tags to each chunk.
	for i, chunk := range chunks {
		chunks[i] = fmt.Sprintf("TAGS: [%s]\n%s", inputTags, chunk)
	}

	var wg sync.WaitGroup

	for _, chunk := range chunks {
		wg.Add(1)

		go func(c string) {
			defer wg.Done()

			docID := fmt.Sprintf("%d", time.Now().UnixNano())
			doc := ChatTurnMessage{
				ID:       docID,
				Prompt:   inputText,
				Response: c,
				Model:    modelName,
			}

			if err := searchIndex.Index(docID, doc); err != nil {
				log.Errorf("Error indexing chunk in Bleve: %v", err)
			}
		}(chunk)
	}

	wg.Wait()

	return nil
}

// searchSimilarEmbeddings searches for similar embeddings in the database.
func searchSimilarEmbeddings(config *AppConfig, modelName string, modelPath string, prompt string, topN int) []vecstore.Embedding {
	db := vecstore.NewEmbeddingDB()
	dbPath := fmt.Sprintf("%s/embeddings.db", config.DataPath)
	embeddings, err := db.LoadEmbeddings(dbPath)
	if err != nil {
		fmt.Println("Error loading embeddings:", err)
		return nil
	}

	model, err := tasks.Load[textencoding.Interface](&tasks.Config{ModelsDir: modelPath, ModelName: modelName})
	if err != nil {
		fmt.Println("Error loading model:", err)
		return nil
	}

	var vec []float64
	result, err := model.Encode(context.Background(), prompt, int(bert.MeanPooling))
	if err != nil {
		fmt.Println("Error encoding text:", err)
		return nil
	}
	vec = result.Vector.Data().F64()[:128]

	embeddingForPrompt := vecstore.Embedding{
		Word:       prompt,
		Vector:     vec,
		Similarity: 0.0,
	}

	// Retrieve the top N similar embeddings
	topEmbeddings := vecstore.FindTopNSimilarEmbeddings(embeddingForPrompt, embeddings, topN)
	if len(topEmbeddings) == 0 {
		fmt.Println("Error finding similar embeddings.")
		return nil
	}

	return topEmbeddings
}

// ToolState represents the state of a tool.
type ToolState struct {
	Tool    string `json:"tool"`
	Enabled bool   `json:"enabled"`
}
--- END /Users/arturoaquino/Documents/eternal/handlers_chat.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/handlers_tools.go ---
package main

import (
	"context"
	"errors"
	"eternal/pkg/sd"
	"eternal/pkg/web"
	"fmt"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/log"
	"github.com/gofiber/websocket/v2"
	"github.com/pterm/pterm"
)

// performToolWorkflow performs the tool workflow on a chat message.
func performToolWorkflow(c *websocket.Conn, config *AppConfig, chatMessage string) string {

	// Begin tool workflow. Tools will add context to the submitted message for the model to use.
	var document string

	if config.Tools.ImgGen.Enabled {
		pterm.Info.Println("Generating image...")
		sdParams := &sd.SDParams{Prompt: chatMessage}

		// Call the sd tool.
		res := sd.Text2Image(config.DataPath, sdParams)
		if res != nil {
			pterm.Error.Println("Error generating image:", res)
			return chatMessage
		}

		// Return the image to the client.
		timestamp := time.Now().UnixNano() // Get the current timestamp in nanoseconds.
		imgElement := fmt.Sprintf("<img class='rounded-2 object-fit-scale' width='512' height='512' src='public/uploads/sd_out.png?%d' />", timestamp)
		formattedContent := fmt.Sprintf("<div id='response-content-%s' class='mx-1' hx-trigger='load'>%s</div>", fmt.Sprint(chatTurn), imgElement)
		if err := c.WriteMessage(websocket.TextMessage, []byte(formattedContent)); err != nil {
			pterm.PrintOnError(err)
			return chatMessage
		}

		// Increment the chat turn counter.
		chatTurn = chatTurn + 1

		// End the tool workflow.
		return chatMessage
	}

	if config.Tools.Memory.Enabled {
		document, _ = handleChatMemory(config, chatMessage)
	}

	if config.Tools.WebGet.Enabled {
		url := web.ExtractURLs(chatMessage)
		if len(url) > 0 {
			pterm.Info.Println("Retrieving page content...")

			document, _ = web.WebGetHandler(url[0])

			// Add the page content to the chat message.

		}
	}

	if config.Tools.WebSearch.Enabled {
		topN := config.Tools.WebSearch.TopN

		pterm.Info.Println("Searching the web...")

		var urls []string
		switch config.Tools.WebSearch.Name {
		case "ddg":
			urls = web.SearchDDG(chatMessage)
		case "sxng":
			urls = web.GetSearXNGResults(config.Tools.WebSearch.Endpoint, chatMessage)
		}

		//pterm.Warning.Printf("URLs to fetch: %v\n", urls)

		ignoredURLs, err := sqliteDB.ListURLTrackings()
		if err != nil {
			log.Errorf("Error listing URL trackings: %v", err)
		}

		// match the ignored URLs with the fetched URLs and remove them from the list
		for _, ignoredURL := range ignoredURLs {
			for i, url := range urls {
				if strings.Contains(url, ignoredURL.URL) {
					urls = append(urls[:i], urls[i+1:]...)

					pterm.Warning.Printf("Ignoring URL: %s\n", ignoredURL.URL)
				}
			}
		}

		var wg sync.WaitGroup
		urlsChan := make(chan string, len(urls))
		failedURLsChan := make(chan []string)
		pagesChan := make(chan string, topN)
		done := make(chan struct{})

		// Fetch URLs concurrently
		for _, url := range urls {
			wg.Add(1)
			go func(u string) {
				defer wg.Done()
				select {
				case <-done:
					return
				default:
					pterm.Info.Printf("Fetching URL: %s\n", u)
					page, err := web.WebGetHandler(u)
					if err != nil {
						if errors.Is(err, context.DeadlineExceeded) {
							pterm.Warning.Printf("Timeout exceeded for URL: %s\n", u)

							// Add the URL to the channel to be processed later
							failedURLsChan <- []string{u}
						} else {
							log.Errorf("Error fetching URL: %v", err)

							failedURLsChan <- []string{u}
						}
						return
					}

					// Prepent the URL to the page content
					page = fmt.Sprintf("%s\n%s", u, page)

					urlsChan <- page
				}
			}(url)
		}

		// Close urlsChan when all fetches are done
		go func() {
			wg.Wait()
			close(urlsChan)
			close(failedURLsChan)
		}()

		// Collect topN pages
		go func() {
			var pagesRetrieved int
			for page := range urlsChan {
				if pagesRetrieved >= topN {
					close(done)
					break
				}
				pagesChan <- page
				pagesRetrieved++
			}
			close(pagesChan)
		}()

		// Process failed URLs
		var failedURLs []string
		for url := range failedURLsChan {
			failedURLs = append(failedURLs, url...)

			// Insert the failed URLs back into the URLTracking table
			for _, failedURL := range failedURLs {
				// Parse the top-level domain from the URL by splitting the URL by slashes and getting the second element.
				tld := strings.Split(failedURL, "/")[2]

				err := sqliteDB.CreateURLTracking(tld)
				if err != nil {
					log.Errorf("Error inserting failed URL into database: %v", err)
				}
			}
		}

		// Retreve the failed URLs from the URLTracking table
		trackedURLs, err := sqliteDB.ListURLTrackings()
		if err != nil {
			log.Errorf("Error listing URL trackings: %v", err)
		}

		// Print the failed URLs
		for _, trackedURL := range trackedURLs {
			pterm.Warning.Printf("New failed URL: %s\n", trackedURL.URL)
		}

		// Process pages
		var document string
		for page := range pagesChan {
			// Parse the first line of the page to get the URL
			pageURL := strings.Split(page, "\n")[0]
			documentTags := fmt.Sprintf("web, %s", pageURL)
			err := handleTextSplitAndIndex(documentTags, page, 1024, "avsolatorio/GIST-small-Embedding-v0")
			if err != nil {
				log.Errorf("Error handling text split and index: %v", err)
			}
			document = fmt.Sprintf("%s\n%s", document, page)
		}

		pterm.Error.Printf("Fetching web search chunks from memory...")
		document, _ = handleChatMemory(config, chatMessage)
		//pterm.Error.Printf("Web Search Document: %s\n", document)
		chatMessage = fmt.Sprintf("%s Reference the previous information if it is relevant to the next query only. Do not provide any additional information other than what is necessary to answer the next question or respond to the query. Be concise. Do not deviate from the topic of the query.\nQUERY:\n%s", document, chatMessage)

		pterm.Info.Println("Tool workflow complete")

		return chatMessage
	}

	chatMessage = fmt.Sprintf("REFERENCE DOCUMENT:\n%s\n\nQUERY:\n%s", document, chatMessage)

	pterm.Info.Println("Tool workflow complete")

	return chatMessage
}

// handleToolToggle toggles the state of various tools based on the provided tool name.
func handleToolToggle(config *AppConfig) fiber.Handler {
	return func(c *fiber.Ctx) error {
		toolName := c.Params("toolName")
		enabled := c.Params("enabled")
		topN := c.Params("topN")

		pterm.Info.Println(enabled)

		// Convert the enabled parameter to a boolean.
		enabledBool, err := strconv.ParseBool(enabled)
		if err != nil {
			return c.Status(fiber.StatusBadRequest).SendString("Invalid enabled parameter")
		}

		// Convert the topN parameter to an integer.
		topNInt, err := strconv.Atoi(topN)
		if err != nil {
			return c.Status(fiber.StatusBadRequest).SendString("Invalid topN parameter")
		}

		// Print the params to the console.
		pterm.Info.Println("Params:")
		pterm.Info.Println(toolName)

		switch toolName {
		case "memory":
			pterm.Warning.Sprintf("Memory tool toggled: %t\n", config.Tools.Memory.Enabled)
			config.Tools.Memory.Enabled = enabledBool
			config.Tools.Memory.TopN = topNInt
		case "webget":
			pterm.Warning.Sprintf("WebGet tool toggled: %t\n", config.Tools.WebGet.Enabled)
			config.Tools.WebGet.Enabled = !config.Tools.WebGet.Enabled
		case "websearch":
			pterm.Warning.Sprintf("WebSearch tool toggled: %t\n", config.Tools.WebSearch.Enabled)
			config.Tools.WebSearch.Enabled = enabledBool
			config.Tools.WebSearch.TopN = topNInt
		case "imggen":
			config.Tools.ImgGen.Enabled = true
		default:
			return c.Status(fiber.StatusNotFound).SendString("Tool not found")
		}

		return c.JSON(fiber.Map{
			"message": fmt.Sprintf("Tool %s toggled", toolName)})
	}
}

// handleToolList retrieves and returns a list of tools from the configuration with all parameters.
func handleToolList(config *AppConfig) fiber.Handler {
	return func(c *fiber.Ctx) error {
		return c.JSON(config.Tools)
	}
}

// handleRoleSelection handles the selection of assistant roles.
func handleRoleSelection(config *AppConfig) fiber.Handler {
	return func(c *fiber.Ctx) error {
		roleName := c.Params("name")
		var foundRole *struct {
			Name         string `yaml:"name"`
			Instructions string `yaml:"instructions"`
		}

		for i := range config.AssistantRoles {
			if config.AssistantRoles[i].Name == roleName {
				foundRole = &config.AssistantRoles[i]
				break
			}
		}

		if foundRole == nil {
			pterm.Warning.Printf("Role %s not found. Defaulting to 'chat'.\n", roleName)
			for i := range config.AssistantRoles {
				if config.AssistantRoles[i].Name == "chat" {
					foundRole = &config.AssistantRoles[i]
					break
				}
			}
		}

		if foundRole == nil && len(config.AssistantRoles) > 0 {
			foundRole = &config.AssistantRoles[0]
			return c.JSON(fiber.Map{
				"message": fmt.Sprintf("Role set to %s", foundRole.Name),
			})
		}

		if foundRole != nil {
			config.CurrentRoleInstructions = foundRole.Instructions
			pterm.Info.Printf("Role set to: %s\n", foundRole.Name)
			pterm.Info.Println(foundRole.Instructions)
			return c.JSON(fiber.Map{
				"message": fmt.Sprintf("Role set to %s", foundRole.Name),
			})
		}

		return c.Status(fiber.StatusInternalServerError).SendString("Server Error")
	}
}
--- END /Users/arturoaquino/Documents/eternal/handlers_tools.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/host.go ---
// NOTE: Thiese functions are not implemented in the main app yet.
package main

import (
	// Importing necessary packages for executing commands, formatting strings, and hardware information retrieval.
	"bytes"
	"fmt"
	"os/exec"
	"runtime"
	"strings"

	"github.com/jaypipes/ghw"        // Package for hardware information
	"github.com/shirou/gopsutil/mem" // Package for system memory information
)

// HostInfo struct: Stores information about the host system.
type HostInfo struct {
	OS     string `json:"os"`   // Operating System
	Arch   string `json:"arch"` // Architecture (e.g., amd64, 386)
	CPUs   int    `json:"cpus"` // Number of CPUs
	Memory struct {
		Total uint64 `json:"total"` // Total memory in bytes
	} `json:"memory"`
	GPUs []GPUInfo `json:"gpus"` // Slice of GPU information
}

// GPUInfo struct: Stores information about GPUs in the system.
type GPUInfo struct {
	Model              string `json:"model"`                 // GPU model
	TotalNumberOfCores string `json:"total_number_of_cores"` // Total cores in GPU
	MetalSupport       string `json:"metal_support"`         // Metal support (specific to macOS)
}

// GetHostInfo function: Retrieves information about the host system.
func GetHostInfo() (HostInfo, error) {
	hostInfo := HostInfo{
		OS:   runtime.GOOS,     // Fetching OS
		Arch: runtime.GOARCH,   // Fetching architecture
		CPUs: runtime.NumCPU(), // Fetching CPU count
	}

	// Retrieve memory information using gopsutil
	vmStat, _ := mem.VirtualMemory()
	hostInfo.Memory.Total = vmStat.Total

	// GPU information retrieval based on OS
	switch runtime.GOOS {
	case "darwin":
		// macOS specific GPU information retrieval
		gpus, err := getMacOSGPUInfo()
		if err != nil {
			fmt.Printf("Error getting GPU info: %v\n", err)
		} else {
			hostInfo.GPUs = append(hostInfo.GPUs, gpus)
		}

	case "linux", "windows":
		// Linux and Windows GPU information retrieval
		gpu, err := ghw.GPU()
		if err != nil {
			fmt.Printf("Error getting GPU info: %v\n", err)
		} else {
			for _, card := range gpu.GraphicsCards {
				gpuInfo := GPUInfo{
					Model: card.DeviceInfo.Product.Name, // Fetching GPU model
				}
				hostInfo.GPUs = append(hostInfo.GPUs, gpuInfo)
			}
		}
	}

	return hostInfo, nil
}

// getMacOSGPUInfo function: Retrieves GPU information for macOS.
func getMacOSGPUInfo() (GPUInfo, error) {
	cmd := exec.Command("system_profiler", "SPDisplaysDataType")

	var out bytes.Buffer
	cmd.Stdout = &out
	err := cmd.Run()
	if err != nil {
		return GPUInfo{}, err
	}

	return parseGPUInfo(out.String())
}

// parseGPUInfo function: Parses the output from system_profiler to extract GPU info.
func parseGPUInfo(input string) (GPUInfo, error) {
	gpuInfo := GPUInfo{}

	for _, line := range strings.Split(input, "\n") {
		// Extracting relevant information from the output
		if strings.Contains(line, "Chipset Model") {
			gpuInfo.Model = strings.TrimSpace(strings.Split(line, ":")[1])
		}
		if strings.Contains(line, "Total Number of Cores") {
			gpuInfo.TotalNumberOfCores = strings.TrimSpace(strings.Split(line, ":")[1])
		}
		if strings.Contains(line, "Metal") {
			gpuInfo.MetalSupport = strings.TrimSpace(strings.Split(line, ":")[1])
		}
	}

	return gpuInfo, nil
}
--- END /Users/arturoaquino/Documents/eternal/host.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/main.go ---
// eternal/main.go - Main entry point for the Eternal application

package main

import (
	"context"
	"embed"
	"errors"
	"eternal/pkg/llm"
	"eternal/pkg/sd"
	"flag"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strings"
	"syscall"

	"github.com/blevesearch/bleve/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/log"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/filesystem"
	"github.com/gofiber/template/html/v2"
	"github.com/pterm/pterm"
	"github.com/pterm/pterm/putils"
	"github.com/spf13/afero"
)

// Embed static files and binaries
//
//go:embed public/* pkg/llm/local/bin/* pkg/sd/sdcpp/build/bin/*
var embedfs embed.FS
var currentProject Project

// WebSocketMessage represents the structure of a WebSocket message
type WebSocketMessage struct {
	ChatMessage string                 `json:"chat_message"`
	Model       string                 `json:"model"`
	Headers     map[string]interface{} `json:"HEADERS"`
}

// Tool represents a tool with its name and enabled status
type Tool struct {
	Name    string `json:"name"`
	Enabled bool   `json:"enabled"`
}

func main() {
	flag.BoolVar(&devMode, "devmode", false, "Run the application in development mode")
	flag.Parse()

	displayBanner()

	// DISABLED due to bug in CUDA
	// Print host information as pterm table
	// hostInfo, err := GetHostInfo()
	// if err != nil {
	// 	pterm.Error.Println("Error getting host information:", err)
	// } else {
	// 	// Convert memory to GB
	// 	hostInfo.Memory.Total = hostInfo.Memory.Total / 1024 / 1024 / 1024
	// 	// Convert ints to strings for pterm table
	// 	pterm.DefaultTable.WithData(pterm.TableData{
	// 		{"OS", hostInfo.OS},
	// 		{"Architecture", hostInfo.Arch},
	// 		{"CPU Cores", fmt.Sprintf("%d", hostInfo.CPUs)},
	// 		{"Memory (GB)", fmt.Sprintf("%d", hostInfo.Memory.Total)},
	// 		{"GPU Model", hostInfo.GPUs[0].Model},
	// 		{"GPU Cores", hostInfo.GPUs[0].TotalNumberOfCores},
	// 		{"Metal Support", hostInfo.GPUs[0].MetalSupport},
	// 	}).Render()
	// }

	// Load configuration
	config, err := loadConfig()
	if err != nil {
		pterm.Error.Println("Error loading config:", err)
		os.Exit(1)
	}

	// Set defaults
	// Set default assistant role
	config.CurrentRoleInstructions = config.AssistantRoles[0].Instructions

	// Initialize tools based on config
	tools := initializeTools(config)

	// If the tool is enabled, print the tool name
	for _, tool := range tools {
		if tool.Enabled {
			pterm.Info.Println("Enabled tool:", tool.Name)
		}
	}

	// Create data directory if it doesn't exist
	if err := createDataDirectory(config.DataPath); err != nil {
		pterm.Error.Println("Error creating data directory:", err)
		os.Exit(1)
	} else {
		// Delete all of the files in the web/public/tmp directory
		tmpDir := filepath.Join(config.DataPath, "web", "public", "tmp")
		if err := os.RemoveAll(tmpDir); err != nil {
			pterm.Error.Println("Error deleting tmp directory:", err)
		}
	}

	// Initialize server
	if err := initializeServer(config.DataPath); err != nil {
		pterm.Error.Println("Error initializing server:", err)
		os.Exit(1)
	}

	pterm.Warning.Println("Server initialized")

	// Initialize database
	if err := initializeDatabase(config); err != nil {
		pterm.Error.Println("Failed to initialize database:", err)
		os.Exit(1)
	}

	currentProject = config.DefaultProjectConfig

	// Create the default project if it doesn't exist
	err = sqliteDB.CreateProject(&currentProject)
	if err != nil {
		pterm.Warning.Println("Default project already exists")
	}

	// List all projects and print to terminal
	projects, err := sqliteDB.ListProjects()
	if err != nil {
		pterm.Error.Println("Failed to list projects:", err)
		os.Exit(1)
	}

	// Convert projects to [][]string
	var projectData [][]string
	for _, project := range projects {
		projectData = append(projectData, []string{project.Name, project.Description})
	}

	// Print the projects as a pterm table
	pterm.DefaultTable.WithData(projectData).WithHasHeader().WithStyle(pterm.NewStyle(pterm.FgCyan)).Render()

	// Initialize search index
	if err := initializeSearchIndex(config.DataPath); err != nil {
		pterm.Error.Println("Failed to initialize search index:", err)
		os.Exit(1)
	}

	// Load model parameters
	modelParams, err := loadModelParams(config)
	if err != nil {
		pterm.Error.Println("Failed to load model data to database:", err)
		os.Exit(1)
	}

	// Prepare data for the pterm table including headers
	tableData := pterm.TableData{
		{"Model Name", "Context Size", "Downloaded"},
	}

	// Loop through model parameters and add each to the table
	for _, param := range modelParams {
		tableData = append(tableData, []string{param.Name, fmt.Sprintf("%d", param.Options.CtxSize), fmt.Sprintf("%t", param.Downloaded)})
	}

	// Print the model parameters as a pterm table
	pterm.DefaultTable.WithData(tableData).WithHasHeader().WithStyle(pterm.NewStyle(pterm.FgCyan)).Render()

	// Load image models
	imageModels, err := loadImageModels(config)
	if err != nil {
		pterm.Error.Println("Failed to load image model data to database:", err)
		os.Exit(1)
	}

	// Print the name of the image model
	for _, model := range imageModels {
		pterm.Info.Println("Image model:", model.Name)
	}

	// Setup context for graceful shutdown
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	pterm.Info.Printf("Serving frontend on: %s:%s\n", config.ControlHost, config.ControlPort)
	pterm.Info.Println("Press Ctrl+C to stop")

	// Run frontend server
	runFrontendServer(ctx, config, modelParams)

	pterm.Warning.Println("Shutdown signal received")
	os.Exit(0)
}

// displayBanner displays the application banner
func displayBanner() {
	_ = pterm.DefaultBigText.WithLetters(putils.LettersFromString("ETERNAL")).Render()
}

// loadConfig loads the application configuration from a file
func loadConfig() (*AppConfig, error) {
	currentPath, err := os.Getwd()
	if err != nil {
		return nil, fmt.Errorf("error getting current path: %w", err)
	}

	configPath := filepath.Join(currentPath, "config.yml")
	pterm.Info.Println("Loading config:", configPath)

	return LoadConfig(osFS, configPath)
}

// initializeTools initializes the tools based on the configuration
func initializeTools(config *AppConfig) []Tool {
	var tools []Tool
	if config.Tools.WebGet.Enabled {
		tools = append(tools, Tool{Name: "webget", Enabled: true})
	}
	if config.Tools.WebSearch.Enabled {
		tools = append(tools, Tool{Name: "websearch", Enabled: true})
	}
	return tools
}

// createDataDirectory creates the data directory if it doesn't exist
func createDataDirectory(dataPath string) error {
	if _, err := os.Stat(dataPath); os.IsNotExist(err) {
		return os.Mkdir(dataPath, 0755)
	}
	return nil
}

// initializeServer initializes the server
func initializeServer(dataPath string) error {
	_, err := InitServer(dataPath)
	return err
}

// initializeDatabase initializes the SQLite database
func initializeDatabase(config *AppConfig) error {
	var err error
	sqliteDB, err = NewSQLiteDB(config.DataPath)
	if err != nil {
		return err
	}

	err = sqliteDB.AutoMigrate(
		&Project{},
		&ModelParams{},
		&ImageModel{},
		&SelectedModels{},
		&Chat{},
		&URLTracking{},
		&Assistant{},
	)
	if err != nil {
		return err
	}

	pterm.Warning.Println("Database initialized")

	return nil
}

func setCurrentProject(projectName string) (Project, error) {
	var project Project
	if err := sqliteDB.First(projectName, &project); err != nil {
		return Project{}, err
	}

	// Set the application context to the current project
	currentProject = project
	return project, nil
}

// initializeSearchIndex initializes the search index
func initializeSearchIndex(dataPath string) error {
	searchDB := fmt.Sprintf("%s/search.bleve", dataPath)

	if _, err := os.Stat(searchDB); os.IsNotExist(err) {
		mapping := bleve.NewIndexMapping()
		searchIndex, err = bleve.New(searchDB, mapping)
		if err != nil {
			return err
		}
	} else {
		searchIndex, err = bleve.Open(searchDB)
		if err != nil {
			return err
		}
	}
	return nil
}

// loadModelParams loads the model parameters from the configuration
func loadModelParams(config *AppConfig) ([]ModelParams, error) {
	var modelParams []ModelParams
	for _, model := range config.LanguageModels {
		if model.Downloads != nil {
			fileName := strings.Split(model.Downloads[0], "/")
			model.LocalPath = fmt.Sprintf("%s/models/%s/%s", config.DataPath, model.Name, fileName[len(fileName)-1])
		}

		var downloaded bool
		if _, err := os.Stat(model.LocalPath); err == nil {
			downloaded = true
		}

		modelParams = append(modelParams, ModelParams{
			Name:       model.Name,
			Homepage:   model.Homepage,
			GGUFInfo:   model.GGUF,
			Downloaded: downloaded,
			Options: &llm.GGUFOptions{
				Model:         model.LocalPath,
				Prompt:        model.Prompt,
				CtxSize:       model.Ctx,
				Temp:          0.7,
				RepeatPenalty: 1.1,
			},
		})
	}

	if err := LoadModelDataToDB(sqliteDB, modelParams); err != nil {
		return nil, err
	}
	return modelParams, nil
}

// loadImageModels loads the image models from the configuration
func loadImageModels(config *AppConfig) ([]ImageModel, error) {
	var imageModels []ImageModel
	for _, model := range config.ImageModels {
		if model.Downloads != nil {
			fileName := strings.Split(model.Downloads[0], "/")
			model.LocalPath = fmt.Sprintf("%s/models/%s/%s", config.DataPath, model.Name, fileName[len(fileName)-1])
		}

		var downloaded bool
		if _, err := os.Stat(model.LocalPath); err == nil {
			downloaded = true
		}

		imageModels = append(imageModels, ImageModel{
			Name:       model.Name,
			Homepage:   model.Homepage,
			Prompt:     model.Prompt,
			Downloaded: downloaded,
			Options: &sd.SDParams{
				Model:  model.LocalPath,
				Prompt: model.Prompt,
			},
		})
	}

	if err := LoadImageModelDataToDB(sqliteDB, imageModels); err != nil {
		return nil, err
	}
	return imageModels, nil
}

// runFrontendServer runs the frontend server
func runFrontendServer(ctx context.Context, config *AppConfig, modelParams []ModelParams) {
	basePath := filepath.Join(config.DataPath, "web")
	baseFs := afero.NewBasePathFs(afero.NewOsFs(), basePath)
	httpFs := afero.NewHttpFs(baseFs)
	engine := html.NewFileSystem(httpFs, ".html")

	app := fiber.New(fiber.Config{
		AppName:               "Eternal v0.1.0",
		BodyLimit:             100 * 1024 * 1024, // 100MB, to allow for larger file uploads
		DisableStartupMessage: true,
		ServerHeader:          "Eternal",
		PassLocalsToViews:     true,
		Views:                 engine,
		StrictRouting:         true,
		StreamRequestBody:     true,
	})

	// Setup CORS middleware
	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowHeaders: "*",
	}))

	// Serve static files
	app.Use("/public", filesystem.New(filesystem.Config{
		Root:   httpFs,
		Index:  "index.html",
		Browse: true,
	}))

	app.Static("/", "public")

	// Setup routes
	setupRoutes(app, config, modelParams)

	// Handle graceful shutdown
	go func() {
		<-ctx.Done() // Wait for the context to be cancelled

		if devMode {
			// delete the search index and database
			if err := os.RemoveAll(filepath.Join(config.DataPath, "search.bleve")); err != nil {
				log.Fatalf("Failed to delete search index: %v", err)
			}

			if err := os.RemoveAll(filepath.Join(config.DataPath, "eternaldata.db")); err != nil {
				log.Fatalf("Failed to delete database: %v", err)
			}

			// Loop through the config models and delete the cache
			for _, model := range modelParams {
				if model.Downloaded {
					cachePath := filepath.Join(config.DataPath, "models", model.Name, "cache")

					// First check if the cache file exists
					if _, err := os.Stat(cachePath); err == nil {
						pterm.Warning.Printf("Deleting cache: %s\n", cachePath)

						if err := os.RemoveAll(cachePath); err != nil {
							log.Fatalf("Failed to delete cache: %v", err)
						}
					}
				}
			}
		}

		if err := app.Shutdown(); err != nil {
			log.Fatalf("Server shutdown failed: %v", err)
		}
	}()

	addr := fmt.Sprintf("%s:%s", config.ControlHost, config.ControlPort)
	if err := app.Listen(addr); err != nil && !errors.Is(err, http.ErrServerClosed) {
		log.Fatalf("Frontend server failed: %v", err)
	}

	pterm.Info.Println("Server gracefully shutdown")
}
--- END /Users/arturoaquino/Documents/eternal/main.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/chat.html ---
<div name="chat-{{.turnID}}" id="chat-{{.turnID}}" hx-ext="ws" ws-connect="{{.wsRoute}}">
  <div class="row">
    <div id="prompt-{{.turnID}}" class="user-prompt rounded-2 mt-3 pb-3" style="background-color: var(--et-card-bg);">
      <div>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
          <g fill="currentColor">
            <path fill-rule="evenodd"
              d="M12 2.75a9.25 9.25 0 1 0 0 18.5a9.25 9.25 0 0 0 0-18.5ZM1.25 12C1.25 6.063 6.063 1.25 12 1.25S22.75 6.063 22.75 12S17.937 22.75 12 22.75S1.25 17.937 1.25 12Zm7.147 3.553a.75.75 0 0 1 1.05-.155c.728.54 1.607.852 2.553.852s1.825-.313 2.553-.852a.75.75 0 1 1 .894 1.204A5.766 5.766 0 0 1 12 17.75a5.766 5.766 0 0 1-3.447-1.148a.75.75 0 0 1-.156-1.049Z"
              clip-rule="evenodd" />
            <path
              d="M16 10.5c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5s.448-1.5 1-1.5s1 .672 1 1.5Zm-6 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S8.448 9 9 9s1 .672 1 1.5Z" />
          </g>
        </svg>
        <span class="badge my-3 mx-1 bg-gradient"
          style="background-color: var(--et-galactic-accent);">{{.username}}</span>
      </div>
      <form id="hidden-form-{{.turnID}}" style="display:none;" hx-trigger="load" ws-send>
        <input type="hidden" name="model" value="{{.model}}">
        <input type="hidden" name="chat_message" value="{{.message}}">
      </form>
      <div>
        <span class="message-content mx-1">{{.message}}</span>
      </div>
    </div>
  </div>
  <div class="row">
    <div id="response-{{.turnID}}" class="response rounded-2 mt-3 pb-3" style="background-color: var(--et-card-bg);">
      <div>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
          <g fill="currentColor">
            <path
              d="M16 10.5c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5s.448-1.5 1-1.5s1 .672 1 1.5Zm-6 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S8.448 9 9 9s1 .672 1 1.5Z" />
            <path fill-rule="evenodd"
              d="M11.943 1.25h.114c2.309 0 4.118 0 5.53.19c1.444.194 2.584.6 3.479 1.494c.895.895 1.3 2.035 1.494 3.48c.19 1.411.19 3.22.19 5.529v.114c0 2.309 0 4.118-.19 5.53c-.194 1.444-.6 2.584-1.494 3.479c-.895.895-2.035 1.3-3.48 1.494c-1.411.19-3.22.19-5.529.19h-.114c-2.309 0-4.118 0-5.53-.19c-1.444-.194-2.584-.6-3.479-1.494c-.895-.895-1.3-2.035-1.494-3.48c-.19-1.411-.19-3.22-.19-5.529v-.114c0-2.309 0-4.118.19-5.53c.194-1.444.6-2.584 1.494-3.479c.895-.895 2.035-1.3 3.48-1.494c1.411-.19 3.22-.19 5.529-.19Zm-5.33 1.676c-1.278.172-2.049.5-2.618 1.069c-.57.57-.897 1.34-1.069 2.619c-.174 1.3-.176 3.008-.176 5.386s.002 4.086.176 5.386c.172 1.279.5 2.05 1.069 2.62c.57.569 1.34.896 2.619 1.068c1.3.174 3.008.176 5.386.176s4.086-.002 5.386-.176c1.279-.172 2.05-.5 2.62-1.069c.569-.57.896-1.34 1.068-2.619c.174-1.3.176-3.008.176-5.386s-.002-4.086-.176-5.386c-.172-1.279-.5-2.05-1.069-2.62c-.57-.569-1.34-.896-2.619-1.068c-1.3-.174-3.008-.176-5.386-.176s-4.086.002-5.386.176Zm1.784 12.627a.75.75 0 0 1 1.05-.155c.728.54 1.607.852 2.553.852s1.825-.313 2.553-.852a.75.75 0 1 1 .894 1.204A5.766 5.766 0 0 1 12 17.75a5.766 5.766 0 0 1-3.447-1.148a.75.75 0 0 1-.156-1.049Z"
              clip-rule="evenodd" />
          </g>
        </svg>
        <span class="badge my-3 mx-1 bg-gradient end-0"
          style="background-color: var(--et-galactic-accent);">{{.assistant}}</span>
      </div>
      <div name="chat-{{.turnID}}" id="response-content-{{.turnID}}" hx-trigger="load, customEndOfStream" hx-on:load="highlight()">
        <div class="loadership_JTACT">
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="js/node_modules/@antonz/codapi/dist/snippet.js"></script>
<script>
  document.getElementById("chat-view").addEventListener("scroll", function () {
    const chatView = document.getElementById("chat-view");
    const scrollToBottomBtn = document.getElementById("scroll-to-bottom-btn");

    userHasScrolled = chatView.scrollHeight - chatView.scrollTop > chatView.clientHeight + 1;

    if (userHasScrolled) {
      scrollToBottomBtn.style.display = 'block';
    } else {
      scrollToBottomBtn.style.display = 'none';
    }
  });

  document.getElementById("scroll-to-bottom-btn").addEventListener("click", function () {
    const chatView = document.getElementById("chat-view");
    chatView.scrollTop = chatView.scrollHeight;
    userHasScrolled = false;
    this.style.display = 'none';
  });

  htmx.on("htmx:wsAfterMessage", function (evt) {
    const box = document.querySelector(".box");
    const newRotation = chatRotation();
    box.style.transition = "transform 0.2s ease";
    box.style.transform = newRotation;
    highlight();

    const chatView = document.getElementById("chat-view");
    const scrollToBottomBtn = document.getElementById("scroll-to-bottom-btn");

    if (!userHasScrolled) {
      chatView.scrollTop = chatView.scrollHeight;
      scrollToBottomBtn.style.display = 'none';
    }
  });

  htmx.on("htmx:wsOpen", function (evt) {
    console.log("WebSocket opened");
    const box = document.querySelector(".box");
    if (box) {
      box.style.transition = "transform 0.5s ease";
      box.style.transform = "rotateX(45deg) rotateY(45deg) rotateZ(-180deg)";
    }
  });

  htmx.on("htmx:wsOnClose", function (evt) {
    console.log("WebSocket closed");
    highlight();
    const box = document.querySelector(".box");
    const newRotation = getRandomRotation();
    box.style.transition = "transform 0.5s ease";
    box.style.transform = newRotation;
  });

  function highlight() {
    const container = document.getElementById("response-content-{{.turnID}}");
    container.querySelectorAll('pre code').forEach((block, index) => {
      if (!block.hasAttribute('data-snippet-added')) {
        hljs.highlightElement(block);
        block.classList.add('rounded-2');
        const snippet = document.createElement('codapi-snippet');
        snippet.setAttribute('url', 'http://localhost:1313/v1');
        snippet.setAttribute('engine', 'browser');
        snippet.setAttribute('sandbox', 'javascript');
        snippet.setAttribute('editor', 'basic');
        const copyButton = document.createElement('button');
        copyButton.classList.add('btn', 'btn-link');
        copyButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
          <path fill="#FFFFFF" fill-rule="evenodd" d="M7.263 3.26A2.25 2.25 0 0 1 9.5 1.25h5a2.25 2.25 0 0 1 2.237 2.01c.764.016 1.423.055 1.987.159c.758.14 1.403.404 1.928.93c.602.601.86 1.36.982 2.26c.116.866.116 1.969.116 3.336v6.11c0 1.367 0 2.47-.116 3.337c-.122.9-.38 1.658-.982 2.26c-.602.602-1.36.86-2.26.982c-.867.116-1.97.116-3.337.116h-6.11c-1.367 0-2.47 0-3.337-.116c-.9-.122-1.658-.38-2.26-.982c-.602-.602-.86-1.36-.981-2.26c-.117-.867-.117-1.97-.117-3.337v-6.11c0-1.367 0-2.47.117-3.337c.12-.9.38-1.658.981-2.26c.525-.525 1.17-.79 1.928-.929c.564-.104 1.224-.143 1.987-.159Zm1.487.741V4.5c0 .414.336.75.75.75h5a.75.75 0 0 0 .75-.75v-1a.75.75 0 0 0-.75-.75h-5a.75.75 0 0 0-.75.75v.501Zm7.985.76A2.25 2.25 0 0 1 14.5 6.75h-5a2.25 2.25 0 0 1-2.235-1.99c-.718.016-1.272.052-1.718.134c-.566.104-.895.272-1.138.515c-.277.277-.457.665-.556 1.4c-.101.754-.103 1.756-.103 3.191v6c0 1.435.002 2.436.103 3.192c.099.734.28 1.122.556 1.399c.277.277.665.457 1.4.556c.754.101 1.756.103 3.191.103h6c1.435 0 2.436-.002 3.192-.103c.734-.099 1.122-.28 1.399-.556c.277-.277.457-.665.556-1.4c.101-.755.103-1.756.103-3.191v-6c0-1.435-.002-2.437-.103-3.192c-.099-.734-.28-1.122-.556-1.399c-.244-.243-.572-.41-1.138-.515c-.446-.082-1-.118-1.718-.133ZM6.25 14.5a.75.75 0 0 1 .75-.75h8a.75.75 0 0 1 0 1.5H7a.75.75 0 0 1-.75-.75Zm0 3.5a.75.75 0 0 1 .75-.75h5.5a.75.75 0 0 1 0 1.5H7a.75.75 0 0 1-.75-.75Z" clip-rule="evenodd"/>
        </svg>`;
        copyButton.onclick = function () {
          navigator.clipboard.writeText(block.textContent).then(() => {
            alert('Code copied to clipboard!');
          }, () => {
            alert('Failed to copy code.');
          });
        };
        const wrapper = document.createElement('div');
        wrapper.setAttribute('id', 'snippet-wrapper');
        wrapper.classList.add('rounded-2', 'mb-3');
        wrapper.style.backgroundColor = '#252525';
        wrapper.appendChild(snippet);
        wrapper.appendChild(copyButton);
        block.parentNode.insertAdjacentElement('afterend', wrapper);
        block.setAttribute('data-snippet-added', 'true');
      }
    });
  }
</script>--- END /Users/arturoaquino/Documents/eternal/public/templates/chat.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/flow.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Eternal Workflows</title>
</head>
<body>
  <script src="../js/drawflow.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/js/all.min.js" integrity="sha256-KzZiKy0DWYsnwMF+X1DvQngQ2/FxF7MF3Ff72XcpuPs=" crossorigin="anonymous"></script>
  <link rel="stylesheet" type="text/css" href="../../css/drawflow/drawflow.min.css" />
  <link rel="stylesheet" type="text/css" href="../../css/drawflow/beautiful.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css" integrity="sha256-h20CPZ0QyXlBuAw7A+KluUYx/3pK+c7lYEpqLTlxjYQ=" crossorigin="anonymous" />
  <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>
  <script src="https://unpkg.com/micromodal/dist/micromodal.min.js"></script>


  <header>
    <h2>Eternal Workflows</h2>
  </header>
  <div class="wrapper">
    <div class="col">
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="prompt">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
          <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-width="1.5" d="M8 12h1m7 0h-4m4-4h-1m-3 0H8m0 8h5M3 14v-4c0-3.771 0-5.657 1.172-6.828C5.343 2 7.229 2 11 2h2c3.771 0 5.657 0 6.828 1.172c.654.653.943 1.528 1.07 2.828M21 10v4c0 3.771 0 5.657-1.172 6.828C18.657 22 16.771 22 13 22h-2c-3.771 0-5.657 0-6.828-1.172c-.654-.653-.943-1.528-1.07-2.828"/>
        </svg>
        <span> Prompt</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="slack">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
          <g fill="currentColor">
              <path d="M16 10.5c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5s.448-1.5 1-1.5s1 .672 1 1.5Zm-6 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S8.448 9 9 9s1 .672 1 1.5Z"/>
              <path fill-rule="evenodd" d="M9.944 1.25H10a.75.75 0 0 1 0 1.5c-1.907 0-3.261.002-4.29.14c-1.005.135-1.585.389-2.008.812c-.423.423-.677 1.003-.812 2.009c-.138 1.028-.14 2.382-.14 4.289a.75.75 0 0 1-1.5 0v-.056c0-1.838 0-3.294.153-4.433c.158-1.172.49-2.121 1.238-2.87c.749-.748 1.698-1.08 2.87-1.238c1.14-.153 2.595-.153 4.433-.153Zm8.345 1.64c-1.027-.138-2.382-.14-4.289-.14a.75.75 0 0 1 0-1.5h.056c1.838 0 3.294 0 4.433.153c1.172.158 2.121.49 2.87 1.238c.748.749 1.08 1.698 1.238 2.87c.153 1.14.153 2.595.153 4.433V10a.75.75 0 0 1-1.5 0c0-1.907-.002-3.261-.14-4.29c-.135-1.005-.389-1.585-.812-2.008c-.423-.423-1.003-.677-2.009-.812ZM2 13.25a.75.75 0 0 1 .75.75c0 1.907.002 3.262.14 4.29c.135 1.005.389 1.585.812 2.008c.423.423 1.003.677 2.009.812c1.028.138 2.382.14 4.289.14a.75.75 0 0 1 0 1.5h-.056c-1.838 0-3.294 0-4.433-.153c-1.172-.158-2.121-.49-2.87-1.238c-.748-.749-1.08-1.698-1.238-2.87c-.153-1.14-.153-2.595-.153-4.433V14a.75.75 0 0 1 .75-.75Zm20 0a.75.75 0 0 1 .75.75v.056c0 1.838 0 3.294-.153 4.433c-.158 1.172-.49 2.121-1.238 2.87c-.749.748-1.698 1.08-2.87 1.238c-1.14.153-2.595.153-4.433.153H14a.75.75 0 0 1 0-1.5c1.907 0 3.262-.002 4.29-.14c1.005-.135 1.585-.389 2.008-.812c.423-.423.677-1.003.812-2.009c.138-1.027.14-2.382.14-4.289a.75.75 0 0 1 .75-.75ZM8.397 15.553a.75.75 0 0 1 1.05-.155c.728.54 1.607.852 2.553.852s1.825-.313 2.553-.852a.75.75 0 1 1 .894 1.204A5.766 5.766 0 0 1 12 17.75a5.766 5.766 0 0 1-3.447-1.148a.75.75 0 0 1-.156-1.049Z" clip-rule="evenodd"/>
          </g>
        </svg>
        <span> Assistant</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="github">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
          <g fill="none">
              <path stroke="currentColor" stroke-linecap="round" stroke-width="1.5" d="M2 8V6c0-1.4 0-2.1.272-2.635a2.5 2.5 0 0 1 1.093-1.093C3.9 2 4.6 2 6 2c1.4 0 2.1 0 2.635.272a2.5 2.5 0 0 1 1.093 1.093C10 3.9 10 4.6 10 6v12c0 1.4 0 2.1-.272 2.635a2.5 2.5 0 0 1-1.093 1.092C8.1 22 7.4 22 6 22c-1.4 0-2.1 0-2.635-.273a2.5 2.5 0 0 1-1.093-1.092C2 20.1 2 19.4 2 18v-6m5 7H5"/>
              <path stroke="currentColor" stroke-width="1.5" d="m13.314 4.929l-2.142 2.142c-.579.578-.867.867-1.02 1.235C10 8.673 10 9.082 10 9.9v9.656l8.97-8.97c.99-.99 1.486-1.485 1.671-2.056a2.5 2.5 0 0 0 0-1.545c-.185-.57-.68-1.066-1.67-2.056c-.99-.99-1.486-1.485-2.056-1.67a2.5 2.5 0 0 0-1.545 0c-.571.185-1.066.68-2.056 1.67Z"/>
              <path fill="currentColor" d="M18 22v-.75v.75Zm0-8v.75V14Zm4 4h-.75h.75Zm-.273 2.635l-.668-.34l.668.34Zm-1.092 1.092l-.34-.668l.34.668Zm1.092-6.362l-.668.34l.668-.34Zm-1.092-1.092l-.34.668l.34-.668ZM13 22.75a.75.75 0 0 0 0-1.5v1.5Zm4-1.5a.75.75 0 0 0 0 1.5v-1.5Zm-1.5-6.5H18v-1.5h-2.5v1.5ZM21.25 18c0 .712 0 1.202-.032 1.58c-.03.371-.085.57-.159.715l1.337.68c.199-.39.28-.809.317-1.272c.038-.454.037-1.015.037-1.703h-1.5ZM18 22.75c.688 0 1.249 0 1.703-.037c.463-.037.882-.118 1.273-.317l-.681-1.337c-.145.074-.344.13-.714.16c-.38.03-.869.031-1.581.031v1.5Zm3.06-2.456a1.75 1.75 0 0 1-.765.765l.68 1.337a3.25 3.25 0 0 0 1.42-1.42l-1.336-.681ZM22.75 18c0-.688 0-1.249-.037-1.703c-.037-.463-.118-.882-.317-1.273l-1.337.682c.074.144.13.343.16.713c.03.38.031.869.031 1.581h1.5ZM18 14.75c.712 0 1.202 0 1.58.032c.371.03.57.085.715.159l.68-1.337c-.39-.199-.809-.28-1.272-.317c-.454-.038-1.015-.037-1.703-.037v1.5Zm4.396.274a3.25 3.25 0 0 0-1.42-1.42l-.681 1.337c.329.167.596.435.764.764l1.337-.68ZM13 21.25H6v1.5h7v-1.5Zm5 0h-1v1.5h1v-1.5Z"/>
          </g>
        </svg>
        <span> Tool</span>
      </div>
    </div>
    <div class="col-right">
      <div class="menu">
        <ul>
          <li onclick="editor.changeModule('Home'); changeModule(event);" class="selected">Main</li>
          <li onclick="editor.changeModule('Other'); changeModule(event);">Other Module</li>
        </ul>
      </div>
      <div id="drawflow" ondrop="drop(event)" ondragover="allowDrop(event)">

        <div class="btn-export" onclick="Swal.fire({ title: 'Export',
        html: '<pre><code>'+JSON.stringify(editor.export(), null,4)+'</code></pre>'
        })">Export</div>
        <div class="btn-clear" onclick="editor.clearModuleSelected()">Clear</div>
        <div class="btn-lock">
          <i id="lock" class="fas fa-lock" onclick="editor.editor_mode='fixed'; changeMode('lock');"></i>
          <i id="unlock" class="fas fa-lock-open" onclick="editor.editor_mode='edit'; changeMode('unlock');" style="display:none;"></i>
        </div>
        <div class="bar-zoom">
          <i class="fas fa-search-minus" onclick="editor.zoom_out()"></i>
          <i class="fas fa-search" onclick="editor.zoom_reset()"></i>
          <i class="fas fa-search-plus" onclick="editor.zoom_in()"></i>
        </div>
      </div>
    </div>
  </div>

  <script>

    var id = document.getElementById("drawflow");
    const editor = new Drawflow(id);
    editor.reroute = true;
    editor.reroute_fix_curvature = true;
    editor.force_first_input = false;

  /*
    editor.createCurvature = function(start_pos_x, start_pos_y, end_pos_x, end_pos_y, curvature_value, type) {
      var center_x = ((end_pos_x - start_pos_x)/2)+start_pos_x;
      return ' M ' + start_pos_x + ' ' + start_pos_y + ' L '+ center_x +' ' +  start_pos_y  + ' L ' + center_x + ' ' +  end_pos_y  + ' L ' + end_pos_x + ' ' + end_pos_y;
    }*/



    

    const dataToImport =  {"drawflow":{"Home":{"data":{"1":{"id":1,"name":"welcome","data":{},"class":"welcome","html":"\n    <div>\n      <div class=\"title-box\">👏 Welcome!!</div>\n      <div class=\"box\">\n        <p>Simple flow library <b>demo</b>\n        <a href=\"https://github.com/jerosoler/Drawflow\" target=\"_blank\">Drawflow</a> by <b>Jero Soler</b></p><br>\n\n        <p>Multiple input / outputs<br>\n           Data sync nodes<br>\n           Import / export<br>\n           Modules support<br>\n           Simple use<br>\n           Type: Fixed or Edit<br>\n           Events: view console<br>\n           Pure Javascript<br>\n        </p>\n        <br>\n        <p><b><u>Shortkeys:</u></b></p>\n        <p>🎹 <b>Delete</b> for remove selected<br>\n        💠 Mouse Left Click == Move<br>\n        ❌ Mouse Right == Delete Option<br>\n        🔍 Ctrl + Wheel == Zoom<br>\n        📱 Mobile support<br>\n        ...</p>\n      </div>\n    </div>\n    ", "typenode": false, "inputs":{},"outputs":{},"pos_x":50,"pos_y":50},"2":{"id":2,"name":"slack","data":{},"class":"slack","html":"\n          <div>\n            <div class=\"title-box\"><i class=\"fab fa-slack\"></i> Slack chat message</div>\n          </div>\n          ", "typenode": false, "inputs":{"input_1":{"connections":[{"node":"7","input":"output_1"}]}},"outputs":{},"pos_x":1028,"pos_y":87},"3":{"id":3,"name":"telegram","data":{"channel":"channel_2"},"class":"telegram","html":"\n          <div>\n            <div class=\"title-box\"><i class=\"fab fa-telegram-plane\"></i> Telegram bot</div>\n            <div class=\"box\">\n              <p>Send to telegram</p>\n              <p>select channel</p>\n              <select df-channel>\n                <option value=\"channel_1\">Channel 1</option>\n                <option value=\"channel_2\">Channel 2</option>\n                <option value=\"channel_3\">Channel 3</option>\n                <option value=\"channel_4\">Channel 4</option>\n              </select>\n            </div>\n          </div>\n          ", "typenode": false, "inputs":{"input_1":{"connections":[{"node":"7","input":"output_1"}]}},"outputs":{},"pos_x":1032,"pos_y":184},"4":{"id":4,"name":"email","data":{},"class":"email","html":"\n            <div>\n              <div class=\"title-box\"><i class=\"fas fa-at\"></i> Send Email </div>\n            </div>\n            ", "typenode": false, "inputs":{"input_1":{"connections":[{"node":"5","input":"output_1"}]}},"outputs":{},"pos_x":1033,"pos_y":439},"5":{"id":5,"name":"template","data":{"template":"Write your template"},"class":"template","html":"\n            <div>\n              <div class=\"title-box\"><i class=\"fas fa-code\"></i> Template</div>\n              <div class=\"box\">\n                Ger Vars\n                <textarea df-template></textarea>\n                Output template with vars\n              </div>\n            </div>\n            ", "typenode": false, "inputs":{"input_1":{"connections":[{"node":"6","input":"output_1"}]}},"outputs":{"output_1":{"connections":[{"node":"4","output":"input_1"},{"node":"11","output":"input_1"}]}},"pos_x":607,"pos_y":304},"6":{"id":6,"name":"github","data":{"name":"https://github.com/jerosoler/Drawflow"},"class":"github","html":"\n          <div>\n            <div class=\"title-box\"><i class=\"fab fa-github \"></i> Github Stars</div>\n            <div class=\"box\">\n              <p>Enter repository url</p>\n            <input type=\"text\" df-name>\n            </div>\n          </div>\n          ", "typenode": false, "inputs":{},"outputs":{"output_1":{"connections":[{"node":"5","output":"input_1"}]}},"pos_x":341,"pos_y":191},"7":{"id":7,"name":"prompt","data":{},"class":"prompt","html":"\n        <div>\n          <div class=\"title-box\"><i class=\"fab fa-prompt\"></i> prompt Message</div>\n        </div>\n        ", "typenode": false, "inputs":{},"outputs":{"output_1":{"connections":[{"node":"2","output":"input_1"},{"node":"3","output":"input_1"},{"node":"11","output":"input_1"}]}},"pos_x":347,"pos_y":87},"11":{"id":11,"name":"log","data":{},"class":"log","html":"\n            <div>\n              <div class=\"title-box\"><i class=\"fas fa-file-signature\"></i> Save log file </div>\n            </div>\n            ", "typenode": false, "inputs":{"input_1":{"connections":[{"node":"5","input":"output_1"},{"node":"7","input":"output_1"}]}},"outputs":{},"pos_x":1031,"pos_y":363}}},"Other":{"data":{"8":{"id":8,"name":"personalized","data":{},"class":"personalized","html":"\n            <div>\n              Personalized\n            </div>\n            ", "typenode": false, "inputs":{"input_1":{"connections":[{"node":"12","input":"output_1"},{"node":"12","input":"output_2"},{"node":"12","input":"output_3"},{"node":"12","input":"output_4"}]}},"outputs":{"output_1":{"connections":[{"node":"9","output":"input_1"}]}},"pos_x":764,"pos_y":227},"9":{"id":9,"name":"dbclick","data":{"name":"Hello World!!"},"class":"dbclick","html":"\n            <div>\n            <div class=\"title-box\"><i class=\"fas fa-mouse\"></i> Db Click</div>\n              <div class=\"box dbclickbox\" ondblclick=\"showpopup(event)\">\n                Db Click here\n                <div class=\"modal\" style=\"display:none\">\n                  <div class=\"modal-content\">\n                    <span class=\"close\" onclick=\"closemodal(event)\">&times;</span>\n                    Change your variable {name} !\n                    <input type=\"text\" df-name>\n                  </div>\n\n                </div>\n              </div>\n            </div>\n            ", "typenode": false, "inputs":{"input_1":{"connections":[{"node":"8","input":"output_1"}]}},"outputs":{"output_1":{"connections":[{"node":"12","output":"input_2"}]}},"pos_x":209,"pos_y":38},"12":{"id":12,"name":"multiple","data":{},"class":"multiple","html":"\n            <div>\n              <div class=\"box\">\n                Multiple!\n              </div>\n            </div>\n            ", "typenode": false, "inputs":{"input_1":{"connections":[]},"input_2":{"connections":[{"node":"9","input":"output_1"}]},"input_3":{"connections":[]}},"outputs":{"output_1":{"connections":[{"node":"8","output":"input_1"}]},"output_2":{"connections":[{"node":"8","output":"input_1"}]},"output_3":{"connections":[{"node":"8","output":"input_1"}]},"output_4":{"connections":[{"node":"8","output":"input_1"}]}},"pos_x":179,"pos_y":272}}}}}
    editor.start();
    editor.import(dataToImport);



  /*
    var welcome = `
    <div>
      <div class="title-box">👏 Welcome!!</div>
      <div class="box">
        <p>Simple flow library <b>demo</b>
        <a href="https://github.com/jerosoler/Drawflow" target="_blank">Drawflow</a> by <b>Jero Soler</b></p><br>

        <p>Multiple input / outputs<br>
           Data sync nodes<br>
           Import / export<br>
           Modules support<br>e
           Simple use<br>
           Type: Fixed or Edit<br>
           Events: view console<br>
           Pure Javascript<br>
        </p>
        <br>
        <p><b><u>Shortkeys:</u></b></p>
        <p>🎹 <b>Delete</b> for remove selected<br>
        💠 Mouse Left Click == Move<br>
        ❌ Mouse Right == Delete Option<br>
        🔍 Ctrl + Wheel == Zoom<br>
        📱 Mobile support<br>
        ...</p>
      </div>
    </div>
    `;
*/


    //editor.addNode(name, "typenode": false,  inputs, outputs, posx, posy, class, data, html);
    /*editor.addNode('welcome', 0, 0, 50, 50, 'welcome', {}, welcome );
    editor.addModule('Other');
    */

    // Events!
    editor.on('nodeCreated', function(id) {
      console.log("Node created " + id);
    })

    editor.on('nodeRemoved', function(id) {
      console.log("Node removed " + id);
    })

    editor.on('nodeSelected', function(id) {
      console.log("Node selected " + id);
    })

    editor.on('moduleCreated', function(name) {
      console.log("Module Created " + name);
    })

    editor.on('moduleChanged', function(name) {
      console.log("Module Changed " + name);
    })

    editor.on('connectionCreated', function(connection) {
      console.log('Connection created');
      console.log(connection);
    })

    editor.on('connectionRemoved', function(connection) {
      console.log('Connection removed');
      console.log(connection);
    })
/*
    editor.on('mouseMove', function(position) {
      console.log('Position mouse x:' + position.x + ' y:'+ position.y);
    })
*/
    editor.on('nodeMoved', function(id) {
      console.log("Node moved " + id);
    })

    editor.on('zoom', function(zoom) {
      console.log('Zoom level ' + zoom);
    })

    editor.on('translate', function(position) {
      console.log('Translate x:' + position.x + ' y:'+ position.y);
    })

    editor.on('addReroute', function(id) {
      console.log("Reroute added " + id);
    })

    editor.on('removeReroute', function(id) {
      console.log("Reroute removed " + id);
    })
    /* DRAG EVENT */

    /* Mouse and Touch Actions */

    var elements = document.getElementsByClassName('drag-drawflow');
    for (var i = 0; i < elements.length; i++) {
      elements[i].addEventListener('touchend', drop, false);
      elements[i].addEventListener('touchmove', positionMobile, false);
      elements[i].addEventListener('touchstart', drag, false );
    }

    var mobile_item_selec = '';
    var mobile_last_move = null;
   function positionMobile(ev) {
     mobile_last_move = ev;
   }

   function allowDrop(ev) {
      ev.preventDefault();
    }

    function drag(ev) {
      if (ev.type === "touchstart") {
        mobile_item_selec = ev.target.closest(".drag-drawflow").getAttribute('data-node');
      } else {
      ev.dataTransfer.setData("node", ev.target.getAttribute('data-node'));
      }
    }

    function drop(ev) {
      if (ev.type === "touchend") {
        var parentdrawflow = document.elementFromPoint( mobile_last_move.touches[0].clientX, mobile_last_move.touches[0].clientY).closest("#drawflow");
        if(parentdrawflow != null) {
          addNodeToDrawFlow(mobile_item_selec, mobile_last_move.touches[0].clientX, mobile_last_move.touches[0].clientY);
        }
        mobile_item_selec = '';
      } else {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("node");
        addNodeToDrawFlow(data, ev.clientX, ev.clientY);
      }

    }

    function addNodeToDrawFlow(name, pos_x, pos_y) {
      if(editor.editor_mode === 'fixed') {
        return false;
      }
      pos_x = pos_x * ( editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)) - (editor.precanvas.getBoundingClientRect().x * ( editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)));
      pos_y = pos_y * ( editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)) - (editor.precanvas.getBoundingClientRect().y * ( editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)));


      switch (name) {
        case 'prompt':
        var prompt = `
        <div>
          <div class="title-box"><i class="fab fa-prompt"></i> prompt Message</div>
        </div>
        `;
          editor.addNode('prompt', 0,  1, pos_x, pos_y, 'prompt', {}, prompt );
          break;
        case 'slack':
          var slackchat = `
          <div>
            <div class="title-box"><i class="fab fa-slack"></i> Slack chat message</div>
          </div>
          `
          editor.addNode('slack', 1, 0, pos_x, pos_y, 'slack', {}, slackchat );
          break;
        case 'github':
          var githubtemplate = `
          <div>
            <div class="title-box"><i class="fab fa-github "></i> Github Stars</div>
            <div class="box">
              <p>Enter repository url</p>
            <input type="text" df-name>
            </div>
          </div>
          `;
          editor.addNode('github', 0, 1, pos_x, pos_y, 'github', { "name": ''}, githubtemplate );
          break;

        default:
      }
    }

  var transform = '';
  function showpopup(e) {
    e.target.closest(".drawflow-node").style.zIndex = "9999";
    e.target.children[0].style.display = "block";
    //document.getElementById("modalfix").style.display = "block";

    //e.target.children[0].style.transform = 'translate('+translate.x+'px, '+translate.y+'px)';
    transform = editor.precanvas.style.transform;
    editor.precanvas.style.transform = '';
    editor.precanvas.style.left = editor.canvas_x +'px';
    editor.precanvas.style.top = editor.canvas_y +'px';
    console.log(transform);

    //e.target.children[0].style.top  =  -editor.canvas_y - editor.container.offsetTop +'px';
    //e.target.children[0].style.left  =  -editor.canvas_x  - editor.container.offsetLeft +'px';
    editor.editor_mode = "fixed";

  }

   function closemodal(e) {
     e.target.closest(".drawflow-node").style.zIndex = "2";
     e.target.parentElement.parentElement.style.display  ="none";
     //document.getElementById("modalfix").style.display = "none";
     editor.precanvas.style.transform = transform;
       editor.precanvas.style.left = '0px';
       editor.precanvas.style.top = '0px';
      editor.editor_mode = "edit";
   }

    function changeModule(event) {
      var all = document.querySelectorAll(".menu ul li");
        for (var i = 0; i < all.length; i++) {
          all[i].classList.remove('selected');
        }
      event.target.classList.add('selected');
    }

    function changeMode(option) {

    //console.log(lock.id);
      if(option == 'lock') {
        lock.style.display = 'none';
        unlock.style.display = 'block';
      } else {
        lock.style.display = 'block';
        unlock.style.display = 'none';
      }

    }

  </script>
</body>
</html>--- END /Users/arturoaquino/Documents/eternal/public/templates/flow.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/public/templates/test.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Paragraph</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .hidden-text {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <p id="test-paragraph" class="hidden-text"></p>
    </div>

    <script>
        // Obfuscated text
        const obfuscatedText = [
            'T', 'h', 'i', 's', ' ',
            'i', 's', ' ',
            'a', ' ',
            't', 'e', 's', 't', ' ',
            'p', 'a', 'r', 'a', 'g', 'r', 'a', 'p', 'h', '.'
        ];

        // Function to deobfuscate and display the text
        function displayText() {
            const paragraph = document.getElementById('test-paragraph');
            paragraph.textContent = obfuscatedText.join('');
            paragraph.classList.remove('hidden-text');
        }

        // Add a delay to simulate human interaction
        setTimeout(displayText, 2000);
    </script>
</body>
</html>
--- END /Users/arturoaquino/Documents/eternal/public/templates/test.html ---

--- BEGIN /Users/arturoaquino/Documents/eternal/config.go ---
// eternal/config.go

package main

import (
	"embed"
	"eternal/pkg/llm"
	"eternal/pkg/sd"
	"fmt"
	"net/url"
	"os"
	"path/filepath"
	"regexp"
	"sync/atomic"
	"time"

	"github.com/gofiber/fiber/v2/log"
	"github.com/spf13/afero"
	"gopkg.in/yaml.v3"
	"gorm.io/gorm"
)

var (
	LocalFs        = new(afero.OsFs)
	MemFs          = afero.NewMemMapFs()
	messageCounter int64
)

type AppConfig struct {
	ServerID                string                            `yaml:"server_id"`
	CurrentUser             string                            `yaml:"current_user"`
	AssistantName           string                            `yaml:"assistant_name"`
	ControlHost             string                            `yaml:"control_host"`
	ControlPort             string                            `yaml:"control_port"`
	DataPath                string                            `yaml:"data_path"`
	ServiceHosts            map[string]map[string]BackendHost `yaml:"service_hosts"`
	ChromedpKey             string                            `yaml:"chromedp_key"`
	OAIKey                  string                            `yaml:"oai_key"`
	AnthropicKey            string                            `yaml:"anthropic_key"`
	GoogleKey               string                            `yaml:"google_key"`
	LanguageModels          []llm.Model                       `yaml:"language_models"`
	ImageModels             []sd.ImageModel                   `yaml:"image_models"`
	CurrentRoleInstructions string                            `yaml:"current_role"`
	AssistantRoles          []struct {
		Name         string `yaml:"name"`
		Instructions string `yaml:"instructions"`
	} `yaml:"assistant_roles"`
	Tools                Tools   `yaml:"tools"`
	DefaultProjectConfig Project `yaml:"default_project"`
}

// BackendHost represents a local or remote backend host.
type BackendHost struct {
	ID            uint           `gorm:"primaryKey" yaml:"-"`
	Host          string         `yaml:"host" gorm:"column:host"`
	Port          string         `yaml:"port" gorm:"column:port"`
	GgufGPULayers int            `yaml:"gpu_layers" gorm:"column:gguf_gpu_layers"`
	ModelType     string         `yaml:"model_type" gorm:"column:model_type"`
	CreatedAt     time.Time      `yaml:"-"`
	UpdatedAt     time.Time      `yaml:"-"`
	DeletedAt     gorm.DeletedAt `gorm:"index" yaml:"-"`
}

// LoadConfig loads configuration from a YAML file.
func LoadConfig(fs afero.Fs, path string) (*AppConfig, error) {
	config := &AppConfig{}

	// Use Afero to read the file
	file, err := afero.ReadFile(fs, path)
	if err != nil {
		return nil, err
	}

	err = yaml.Unmarshal(file, config)
	if err != nil {
		return nil, err
	}

	return config, nil
}

func InitServer(configPath string) (string, error) {

	// WEB FILES
	webPath := filepath.Join(configPath, "web")
	err := os.MkdirAll(webPath, 0755)
	if err != nil {
		return "", fmt.Errorf("failed to create directory %s: %v", webPath, err)
	}
	err = CopyFiles(embedfs, "public", webPath)
	if err != nil {
		return "", fmt.Errorf("failed to copy files: %v", err)
	}

	// GGUF FILES
	ggufPath := filepath.Join(configPath, "gguf")
	err = os.MkdirAll(ggufPath, 0755)
	if err != nil {
		return "", fmt.Errorf("failed to create directory %s: %v", ggufPath, err)
	}
	err = CopyFiles(embedfs, "pkg/llm/local/bin", ggufPath)
	if err != nil {
		return "", fmt.Errorf("failed to copy files: %v", err)
	}

	files, err := os.ReadDir(ggufPath)
	if err != nil {
		return "", fmt.Errorf("failed to read directory %s: %v", ggufPath, err)
	}

	for _, file := range files {
		if !file.IsDir() {
			err = os.Chmod(filepath.Join(ggufPath, file.Name()), 0755)
			if err != nil {
				return "", fmt.Errorf("failed to set executable permission on file %s: %v", file.Name(), err)
			}
		}
	}

	// IMG GEN
	imgGenPath := filepath.Join(configPath, "sd")
	err = os.MkdirAll(imgGenPath, 0755)
	if err != nil {
		return "", fmt.Errorf("failed to create directory %s: %v", imgGenPath, err)
	}

	err = CopyFiles(embedfs, "pkg/sd/sdcpp/build/bin", imgGenPath)
	if err != nil {
		return "", fmt.Errorf("failed to copy files: %v", err)
	}

	files, err = os.ReadDir(imgGenPath)
	if err != nil {
		return "", fmt.Errorf("failed to read directory %s: %v", imgGenPath, err)
	}

	for _, file := range files {
		if !file.IsDir() {
			err = os.Chmod(filepath.Join(imgGenPath, file.Name()), 0755)
			if err != nil {
				return "", fmt.Errorf("failed to set executable permission on file %s: %v", file.Name(), err)
			}
		}
	}

	return configPath, nil
}

func EnsureDataPath(config *AppConfig) error {
	if _, err := os.Stat(config.DataPath); os.IsNotExist(err) {
		return LocalFs.MkdirAll(config.DataPath, os.ModePerm)
	}
	return nil
}

func CopyFiles(fsys embed.FS, srcDir, destDir string) error {
	fileEntries, err := fsys.ReadDir(srcDir)
	if err != nil {
		return fmt.Errorf("failed to read directory %s: %v", srcDir, err)
	}

	for _, entry := range fileEntries {
		srcPath := filepath.Join(srcDir, entry.Name())
		destPath := filepath.Join(destDir, entry.Name())

		if entry.IsDir() {
			// Create the directory and copy its contents
			if err := os.MkdirAll(destPath, 0755); err != nil {
				return fmt.Errorf("failed to create directory %s: %v", destPath, err)
			}
			if err := CopyFiles(fsys, srcPath, destPath); err != nil {
				return err
			}
		} else {
			// Copy the file
			fileData, err := fsys.ReadFile(srcPath)
			if err != nil {
				log.Errorf("failed to read file %s: %v", srcPath, err)
				continue // Skip to the next file
			}
			if err := os.WriteFile(destPath, fileData, 0755); err != nil {
				return fmt.Errorf("failed to write file %s: %v", destPath, err)
			}
		}
	}
	return nil
}

// Increments and returns a counter that gets appended to the id for frontend chat elements
func IncrementTurn() int64 {
	return atomic.AddInt64(&messageCounter, 1)
}

// findURLInText searches for a URL in a given text and returns it if found.
// It returns nil if no valid URL is found.
func URLParse(text string) *url.URL {
	// Define a regular expression for finding URLs
	// This is a simple regex for demonstration; it might not cover all URL cases
	re := regexp.MustCompile(`https?://[^\s]+`)

	// Find a URL using the regex
	found := re.FindString(text)
	if found == "" {
		// No URL found
		return nil
	}

	// Parse the URL to validate it and return *url.URL
	parsedURL, err := url.Parse(found)
	if err != nil {
		// The URL is not valid
		return nil
	}

	return parsedURL
}
--- END /Users/arturoaquino/Documents/eternal/config.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/db.go ---
// db.go

package main

import (
	"errors"
	"eternal/pkg/llm"
	"eternal/pkg/sd"
	"fmt"
	"reflect"
	"time"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

type SQLiteDB struct {
	db *gorm.DB
}

// TEST
type ChatSession struct {
	ID        int64 `gorm:"primaryKey;autoIncrement"`
	CreatedAt time.Time
	UpdatedAt time.Time
	ChatTurns []ChatTurn `gorm:"foreignKey:SessionID"`
}

type ChatTurn struct {
	ID         int64 `gorm:"primaryKey;autoIncrement"`
	SessionID  int64
	UserPrompt string
	Responses  []ChatResponse `gorm:"foreignKey:TurnID"`
}

type ChatResponse struct {
	ID        int64 `gorm:"primaryKey;autoIncrement"`
	TurnID    int64
	Content   string
	Model     string // Identifier for the LLM model used
	Host      SystemInfo
	CreatedAt time.Time
}

type SystemInfo struct {
	OS     string `json:"os"`
	Arch   string `json:"arch"`
	CPUs   int    `json:"cpus"`
	Memory Memory `json:"memory"`
	GPUs   []GPU  `json:"gpus"`
}

type Memory struct {
	Total int64 `json:"total"`
}

type GPU struct {
	Model              string `json:"model"`
	TotalNumberOfCores string `json:"total_number_of_cores"`
	MetalSupport       string `json:"metal_support"`
}

// END TEST

type ModelParams struct {
	ID         int              `gorm:"primaryKey;autoIncrement"`
	Name       string           `yaml:"name"`
	Homepage   string           `yaml:"homepage"`
	GGUFInfo   string           `yaml:"gguf,omitempty"`
	Downloads  string           `yaml:"downloads,omitempty"`
	Downloaded bool             `yaml:"downloaded"`
	Options    *llm.GGUFOptions `gorm:"embedded"`
}

type ImageModel struct {
	ID         int          `gorm:"primaryKey;autoIncrement"`
	Name       string       `yaml:"name"`
	Homepage   string       `yaml:"homepage"`
	Prompt     string       `yaml:"prompt"`
	Downloads  string       `yaml:"downloads,omitempty"`
	Downloaded bool         `yaml:"downloaded"`
	Options    *sd.SDParams `gorm:"embedded"`
}

type SelectedModels struct {
	ID        int    `gorm:"primaryKey;autoIncrement"`
	ModelName string `json:"modelName"`
	Action    string `json:"action"`
}

type Chat struct {
	ID        int64 `gorm:"primaryKey;autoIncrement"`
	Prompt    string
	Response  string
	ModelName string
}

type ProjectTool struct {
	gorm.Model
	Name      string `gorm:"unique;not null"`
	Enable    bool
	ProjectID uint // Foreign key that refers to Project
}

// type File struct {
// 	gorm.Model
// 	Path      string
// 	Content   string
// 	ProjectID uint // Foreign key that refers to Project
// }

// URLTracking represents the structure for tracking URLs
type URLTracking struct {
	ID  int64  `gorm:"primaryKey;autoIncrement"`
	URL string `gorm:"unique;not null"`
}

func NewSQLiteDB(dataPath string) (*SQLiteDB, error) {

	// Silence gorm logs during this step
	newLogger := logger.Default.LogMode(logger.Silent)

	dbPath := fmt.Sprintf("%s/eternaldata.db", dataPath)
	db, err := gorm.Open(sqlite.Open(dbPath), &gorm.Config{
		Logger: newLogger,
	})
	if err != nil {
		return nil, fmt.Errorf("error opening database: %v", err)
	}
	return &SQLiteDB{db: db}, nil
}

func (sqldb *SQLiteDB) AutoMigrate(models ...interface{}) error {
	for _, model := range models {
		if err := sqldb.db.AutoMigrate(model); err != nil {
			return fmt.Errorf("error migrating schema for %v: %v", reflect.TypeOf(model), err)
		}
	}
	return nil
}

// GetProjects retrieves all projects from the database.
func (sqldb *SQLiteDB) GetProjects() ([]Project, error) {
	var projects []Project
	err := sqldb.db.Find(&projects).Error

	return projects, err
}

// CreateProject inserts a new project into the database.
func (sqldb *SQLiteDB) CreateProject(project *Project) error {
	return sqldb.db.Create(project).Error
}

// DeleteProject removes a project from the database.
func (sqldb *SQLiteDB) DeleteProject(name string) error {
	return sqldb.db.Where("name = ?", name).Delete(&Project{}).Error
}

// ListProjects retrieves all projects from the database.
func (sqldb *SQLiteDB) ListProjects() ([]Project, error) {
	var projects []Project
	err := sqldb.db.Find(&projects).Error
	return projects, err
}

func (sqldb *SQLiteDB) Create(record interface{}) error {
	return sqldb.db.Create(record).Error
}

func (sqldb *SQLiteDB) Find(out interface{}) error {
	return sqldb.db.Find(out).Error
}

func (sqldb *SQLiteDB) First(name string, out interface{}) error {
	return sqldb.db.Where("name = ?", name).First(out).Error
}

func (sqldb *SQLiteDB) FindByID(id uint, out interface{}) error {
	return sqldb.db.First(out, id).Error
}

func (sqldb *SQLiteDB) UpdateByName(name string, updatedRecord interface{}) error {
	// Assuming 'Name' is the field in your model that holds the model's name.
	// The method first finds the record by name and then applies the updates.
	return sqldb.db.Model(updatedRecord).Where("name = ?", name).Updates(updatedRecord).Error
}

func (sqldb *SQLiteDB) UpdateDownloadedByName(name string, downloaded bool) error {
	return sqldb.db.Model(&ModelParams{}).Where("name = ?", name).Update("downloaded", downloaded).Error
}

func (sqldb *SQLiteDB) Delete(id uint, model interface{}) error {
	return sqldb.db.Delete(model, id).Error
}

func LoadModelDataToDB(db *SQLiteDB, models []ModelParams) error {
	for _, model := range models {
		var existingModel ModelParams
		result := db.db.Where("name = ?", model.Name).First(&existingModel)

		if result.Error != nil {
			if errors.Is(result.Error, gorm.ErrRecordNotFound) {
				// If the model is not found, create a new one
				if err := db.Create(&model); err != nil {
					return err
				}
			} else {
				// Other errors
				return result.Error
			}
		} else {
			// If the model exists, update it
			if err := db.db.Model(&existingModel).Updates(&model).Error; err != nil {
				return err
			}
		}
	}

	return nil
}

func LoadImageModelDataToDB(db *SQLiteDB, models []ImageModel) error {
	for _, model := range models {
		var existingModel ImageModel
		result := db.db.Where("name = ?", model.Name).First(&existingModel)

		if result.Error != nil {
			if errors.Is(result.Error, gorm.ErrRecordNotFound) {
				// If the model is not found, create a new one
				if err := db.Create(&model); err != nil {
					return err
				}
			} else {
				// Other errors
				return result.Error
			}
		} else {
			// If the model exists, update it
			if err := db.db.Model(&existingModel).Updates(&model).Error; err != nil {
				return err
			}
		}
	}

	return nil
}

func AddSelectedModel(db *gorm.DB, modelName string) error {
	// Remove any existing selected model from the database
	if err := db.Where("1 = 1").Delete(&SelectedModels{}).Error; err != nil {
		return err
	}

	// Create a new selected model
	selectedModel := SelectedModels{
		ModelName: modelName,
	}

	// Add the new selected model to the database
	return db.Create(&selectedModel).Error
}

func RemoveSelectedModel(db *gorm.DB, modelName string) error {
	return db.Where("model_name = ?", modelName).Delete(&SelectedModels{}).Error
}

func GetSelectedModels(db *gorm.DB) ([]SelectedModels, error) {
	var selectedModels []SelectedModels
	err := db.Find(&selectedModels).Error
	return selectedModels, err
}

// CreateChat inserts a new chat into the database.
func CreateChat(db *gorm.DB, prompt, response, model string) (Chat, error) {
	chat := Chat{Prompt: prompt, Response: response, ModelName: model}
	result := db.Create(&chat)
	return chat, result.Error
}

// GetChats retrieves all chat entries from the database.
func GetChats(db *gorm.DB) ([]Chat, error) {
	var chats []Chat
	result := db.Find(&chats)
	return chats, result.Error
}

// GetChatByID retrieves a chat by its ID.
func GetChatByID(db *gorm.DB, id int64) (Chat, error) {
	var chat Chat
	result := db.First(&chat, id)
	return chat, result.Error
}

// UpdateChat updates an existing chat entry in the database without changing its ID.
func UpdateChat(db *gorm.DB, id int64, newPrompt, newResponse, newModel string) error {
	result := db.Model(&Chat{}).Where("id = ?", id).Updates(Chat{Prompt: newPrompt, Response: newResponse, ModelName: newModel})
	return result.Error
}

// DeleteChat removes a chat entry from the database.
func DeleteChat(db *gorm.DB, id int64) error {
	result := db.Delete(&Chat{}, id)
	return result.Error
}

// CreateURLTracking inserts a new URL into the URLTracking table
func (sqldb *SQLiteDB) CreateURLTracking(url string) error {
	var existingURLTracking URLTracking

	// Check if the URL already exists in the table
	err := sqldb.db.Where("url = ?", url).First(&existingURLTracking).Error
	if err == nil {
		// URL already exists, return without inserting
		return nil
	} else if !errors.Is(err, gorm.ErrRecordNotFound) {
		// An error other than "record not found" occurred
		return err
	}

	// URL does not exist, proceed to insert
	urlTracking := URLTracking{URL: url}
	return sqldb.db.Create(&urlTracking).Error
}

// ListURLTrackings retrieves all URLs from the URLTracking table
func (sqldb *SQLiteDB) ListURLTrackings() ([]URLTracking, error) {
	var urlTrackings []URLTracking
	err := sqldb.db.Find(&urlTrackings).Error
	return urlTrackings, err
}

// DeleteURLTracking removes a URL from the URLTracking table
func (sqldb *SQLiteDB) DeleteURLTracking(url string) error {
	return sqldb.db.Where("url = ?", url).Delete(&URLTracking{}).Error
}

// UpdateModelDownloadedState updates the downloaded state of a model in the database.
// func UpdateModelDownloadedState(db *gorm.DB, dataPath string, modelName string, downloaded bool) error {
// 	db, err := NewSQLiteDB(dataPath)
// 	if err != nil {
// 		return fmt.Errorf("failed to open database: %w", err)
// 	}
// 	defer db.Close()

// 	err = db.UpdateDownloadedByName(modelName, downloaded)
// 	if err != nil {
// 		return fmt.Errorf("failed to update model downloaded state: %w", err)
// 	}

// 	return nil
// }

func CreateDevTeam(sqldb *SQLiteDB) error {
	// Create a new team
	team := Team{
		Name: "Dev Team",
		Assistants: []Assistant{
			{
				Name: "Senior Developer",
				Role: Role{
					Name:         "Software Developer",
					Instructions: "Help with software development tasks",
				},
			},
			{
				Name: "Code Reviewer",
				Role: Role{
					Name:         "Code Reviewer",
					Instructions: "Review code changes and provide feedback",
				},
			},
		},
	}

	// Create the team in the database
	if err := sqldb.Create(&team).Error; err != nil {
		return fmt.Errorf("failed to create team: %w", err)
	}

	return nil
}
--- END /Users/arturoaquino/Documents/eternal/db.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/globals.go ---
// globals.go
package main

import (
	"github.com/blevesearch/bleve/v2"
	"github.com/spf13/afero"
)

var (
	devMode     bool     // If enabled, removes the database and search index on shutdown
	osFS        afero.Fs = afero.NewOsFs()
	chatTurn             = 1
	sqliteDB    *SQLiteDB
	searchIndex bleve.Index
)
--- END /Users/arturoaquino/Documents/eternal/globals.go ---

--- BEGIN /Users/arturoaquino/Documents/eternal/handlers_projects.go ---
package main

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
)

// handleGetProjects returns a handler function that retrieves all projects
func handleGetProjects() func(*fiber.Ctx) error {
	return func(c *fiber.Ctx) error {
		projects, err := sqliteDB.GetProjects()
		if err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
				"error": fmt.Sprintf("failed to get projects: %v", err),
			})
		}

		// Print the projects
		for _, project := range projects {
			fmt.Printf("Project: %s\n", project.Name)
		}

		// render content in projects template
		return c.Render("templates/projects", fiber.Map{
			"projects": projects,
		})
	}
}
--- END /Users/arturoaquino/Documents/eternal/handlers_projects.go ---

The previous code is part of the code repository for a platform named eternal. We want to add a new feature to stop the websocket chat from streaming. For example, the pkg/llm/gguf.go package invokes a cli application that streams text to the websocket back to the chat client. We want to add a button to the chat.html view, next to the response badge, to stop generation.
Write a list of ideas on how we might accomplish this. Do we stop the process for the cli app? Do we close the socket?